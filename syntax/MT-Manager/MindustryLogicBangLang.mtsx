// mindustry logic bang lang 的语法高亮规则
// https://github.com/A4-Tacks/mindustry_logic_bang_lang
{
	name: ["MindustryLogicBangLang", ".mdtlbl"]
	// no hidden
	hide: false
	comment: { startsWith: "#", addToContains: false }
	defines: [
		"ws": /(?:[\s\r\n]*)/
	]
	contains: [
		{ // long comments
			start: { match: /#\*/ }
			end: { match: /\*#/ }
			color: "comment"
		}
		{ // inline comments
			start: { match: /#(?!=\*)/ }
			end: { match: /(?=\n|$)/ }
			color: "comment"

		}
		{ // number
			match: /(?:\b0(?:x\-?[\da-fA-F][\da-fA-F_]*|b\-?[01][_01]*)/
				+ /|\-?\b\d[0-9_]*(?:\.\d[\d_]*|e[+\-]?\d[\d_]*)?)\b/
			0: "number"
		}
		{ // boolean
			match: /\b(?:true|false)\b/
			0: "number"
		}
		{ // null
			match: /\bnull\b/
			0: "number"
		}
		{ // DExp result handle define
			match: /\(/+include("ws")+/([a-zA-Z_][a-zA-Z0-9_\-]*:)/
			1: "keyword2"
		}
		{ // string
			start: {match: /"/}
			end: {match: /"/}
			color: "string"
			contains: [
				{ // string escape
					match: /(?:(?<=\n)\s*\\ |\\(?:[n\[\\]|\r?\n)|(\\.))/
					0: "strEscape"
					1: "error"
				}
				{ // string color
					match: /\[(?:#[\da-fA-F]{6,8}|(?:c(?:lear|yan|oral)|b(?:l(?:ack|ue)|r(?:own|ick))|white|li(?:ghtgray|me)|g(?:r(?:ay|een)|old(?:enrod)?)|darkgray|navy|r(?:oyal|ed)|s(?:late|ky|carlet|almon)|t(?:eal|an)|acid|forest|o(?:live|range)|yellow|p(?:ink|urple)|ma(?:genta|roon)|violet))?\]/
					0: "strEscape"
				}
			]
		}
		{ // 元标识符
			match: /@[a-zA-Z_][a-zA-Z0-9_\-]*/
			0: "meta"
		}
		{ // 原始标识符
			match: /'[^\s']+'/
			0: "constant"
		}
		{ // 参数展开
			match: /@/
			0: "keyword"
		}
		{ // control can star
			match: keywordsToRegex("case") + /\*?/
			0: "keyword"
		}
		{ // control
			match: keywordsToRegex(
				"while gwhile do skip goto if elif else switch"
				"select break continue"
			)
			0: "keyword"
		}
		{ // 返回句柄替换符
			match: /\$/
			0: "keyword2"
		}
		{ // 绑定者
			match: /\.\./
			0: "keyword2"
		}
		{ // other keywords can star
			match: keywordsToRegex("take inline") + /\*?/
			0: "keyword2"
		}
		{ // other keywords
			match: keywordsToRegex(
				"const match setres print set op noop"
			)
			0: "keyword2"
		}
		{ // operator
			match: keywordsToRegex(
				"abs acos add always and angle angleDiff asin atan ceil"
				"cos div equal floor greaterThan greaterThanEq"
				"idiv land len lessThan lessThanEq lnot log"
				"max min mod mul noise not notEqual or"
				"pow rand shl shr sin sqrt strictEqual"
				"strictNotEqual sub tan xor"
			)
			0: "tagName"
		}
		{ // cmp operator
			match: /[<>](?![<>])=?|[=!]==?/
			0: "default"
		}
		{ // match fat arrow
			match: /=>/
			0: "keyword2"
		}
		{ // self inc and dec
			match: /([+\-])\1/
			0: "tagName"
		}
		{ // self operator
			match: /(?:\/\/|\*\*|&&|<<|>>|[+\-*\/%|&^])?=/
			0: "tagName"
		}
		{ // label
			match: /:(?:[a-zA-Z]|[a-zA-Z_][a-zA-Z0-9_]+)\b/
			0: "label"
		}
		{ // quick dexp take
			match: /(?:(?:[a-zA-Z_][a-zA-Z0-9_]*)(?:!|(?:->)?\[)|[\[\]]|->|\b_\b)/
			0: "variable"
		}
		{ // control operator
			match: /&&|\|\||!/
			0: "keyword"
		}
	]
}
