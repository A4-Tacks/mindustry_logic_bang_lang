{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "MindustryLogicBangLang",
	"scopeName": "source.mdtlbl",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#string"
		},
		{
			"include": "#comments-doc"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#special-constants"
		},
		{
			"include": "#label"
		},
		{
			"include": "#object"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#numbers"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.mdtlbl",
					"match": "\\b(if|elif|else|do|while|for|take|goto|switch|gswitch|case|skip|gwhile|setres|select|match|break|continue)\\b"
				},
				{
					"name": "storage.modifier.mdtlbl",
					"match": "\\b(const|set|inline)\\b"
				},
				{
					"name": "entity.name.function.mdtlbl",
					"match": "\\b(op|read|write|draw|print|format|drawflush|printflush|getlink|control|radar|sensor|lookup|packcolor|wait|stop|ubind|ucontrol|uradar|ulocate|end)\\b"
				},
				{
					"name": "storage.modifier.mdtlbl",
					"match": "\\b(equal|notEqual|strictNotEqual|lessThan|lessThanEq|greaterThan|greaterThanEq|strictEqual|always|lnot|add|sub|mul|div|idiv|mod|emod|pow|shl|shr|ushr|or|and|land|xor|max|min|angle|angleDiff|len|noise|not|abs|sign|log|logn|log10|floor|ceil|round|sqrt|rand|sin|cos|tan|asin|acos|atan)\\b"
				},
				{
					"match": "((?<!\\p{XID_Continue})!|&&|\\|\\||=>)(?!=)",
					"name": "keyword.control.mdtlbl"
				},
				{
					"match": "([!=]==?|[<>](?![<>]=?))",
					"name": "keyword.operator.comparison.mdtlbl"
				},
				{
					"match": "((?://|\\*\\*|&&|<<|>>>?|[+\\-*/%|&^])=|(?<![<>])=|\\+\\+|--)",
					"name": "keyword.operator.new.mdtlbl"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"include": "#qstring-single"
				},
				{
					"include": "#qstring-double"
				}
			]
		},
		"qstring-double": {
			"name": "string.quoted.double.mdtlbl",
			"begin": "\"",
			"end": "\"",
			"captures": {
				"0": {
					"name": "punctuation.definition.string.mdtlbl"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.mdtlbl",
					"match": "\\\\(?:[\\\\\"n ]|$|(.))",
					"captures": {
						"1": {
							"name": "invalid.illegal.mdtlbl"
						}
					}
				}
			]
		},
		"qstring-single": {
			"name": "variable.other.readwrite.mdtlbl",
			"begin": "'",
			"end": "'",
			"captures": {
				"0": {
					"name": "punctuation.definition.string.mdtlbl"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.mdtlbl",
					"match": "\""
				}
			]
		},
		"comments-doc": {
			"patterns": [
				{
					"begin": "^\\s*(#\\*\\*)(?!#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.mdtlbl"
						}
					},
					"end": "\\*#",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.mdtlbl"
						}
					},
					"name": "comment.block.doc.mdtlbl"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mdtlbl"
						}
					},
					"match": "#\\*\\*#",
					"name": "comment.block.empty.mdtlbl"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"begin": "^\\s*#\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mdtlbl"
						}
					},
					"end": "\\*#",
					"name": "comment.block.mdtlbl"
				},
				{
					"begin": "(^[ \\t]+)?(?=#)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.mdtlbl"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "#",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.mdtlbl"
								}
							},
							"end": "\\n",
							"name": "comment.line.sharp.mdtlbl"
						}
					]
				}
			]
		},
		"special-constants": {
			"patterns": [
				{
					"match": "\\b(true|false|null|noop)\\b",
					"name": "constant.language.mdtlbl"
				},
				{
					"match": "\\$|(?<!\\()`|\\.\\.|->|(?<=\\p{XID_Continue})!",
					"name": "constant.language.mdtlbl"
				},
				{
					"match": "\\([%?]?(`?)(?:'[^' ]+'|[_\\p{XID_Start}]\\p{XID_Continue}*|@[_\\p{XID_Start}][\\p{XID_Continue}\\-]*|-?\\d[xb]?-?[_\\da-fA-F]*)\\1:",
					"name": "constant.language.mdtlbl"
				},
				{
					"match": "@(?![_\\p{XID_Start}])",
					"name": "constant.language.mdtlbl"
				}
			]
		},
		"label": {
			"patterns": [
				{
					"match": ":\\w+",
					"name": "entity.name.tag.mdtlbl"
				},
				{
					"match": ":'[^ ']+'",
					"name": "entity.name.tag.mdtlbl"
				}
			]
		},
		"object": {
			"patterns": [
				{
					"match": "@[_\\p{XID_Start}][\\p{XID_Continue}\\-]*",
					"name": "variable.other.constant.mdtlbl"
				}
			]
		},
		"variable": {
			"patterns": [
				{
					"match": "(?<!:|@)\\b(?:[A-Z]\\p{XID_Continue}*|_\\d+)\\b",
					"name": "variable.other.constant.mdtlbl"
				},
				{
					"match": "(?<!:|@)\\b(?:\\p{XID_Start}\\p{XID_Continue}*|_(?!\\d)\\p{XID_Continue}+)\\b",
					"name": "variable.other.readwrite.mdtlbl"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "[+\\-]?\\b0x-[+\\-]?[\\da-fA-F][\\d_a-fA-F]*",
					"name": "constant.numeric.hex.mdtlbl"
				},
				{
					"match": "[+\\-]?\\b0b[+\\-]?[01][_01]*",
					"name": "constant.numeric.binary.mdtlbl"
				},
				{
					"match": "[+\\-]??\\b\\d[\\d_]*(?:\\.\\d[0-9_]*|e[+\\-]?\\d[\\d_]*)?",
					"name": "constant.numeric.decimal.mdtlbl"
				}
			]
		}
	}
}
