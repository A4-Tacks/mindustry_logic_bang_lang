// this is a lalrpop file

#![allow(unused_braces)]
#![allow(clippy::just_underscores_and_digits)]
#![allow(clippy::needless_lifetimes)]
#![allow(clippy::deprecated_cfg_attr)]

use ::syntax::{
    Errors,
    Error,
    Op,
    Value::{
        self,
        ResultHandle,
        ReprVar,
    },
    Var,
    DExp,
    ValueBind,
    ValueBindRef,
    ValueBindRefTarget,
    ClosuredValue,
    ClosuredValueMethod,
    op_expr_build_op,
    op_expr_build_results,
    op_expr_tools::top_assign_oper,
    OpExprInfo,
    OpExprAOperFun,
    JumpCmp,
    CmpTree,
    Goto,
    Expand,
    InlineBlock,
    SwitchCatch,
    Select,
    GSwitch,
    GSwitchCase,
    Const,
    Take,
    ConstKey,
    LogicLine,
    Args,
    ArgsRepeat,
    Match,
    MatchPat,
    MatchPatAtom,
    ConstMatch,
    ConstMatchPat,
    ConstMatchPatAtom,
    Meta,
    ZERO_VAR,
    FALSE_VAR,
};
use ::var_utils::string_escape;

grammar(meta: &mut Meta);

extern {
    type Error = Error;
    type Location = Location;
}

match {
    r"\s+" => {}, // empty
    r##"#(?:[\r\n]|[^\*][^\r\n]*)"## => {}, // inline comments
    r##"#\*[^*]*\*+(?:[^#*][^*]*\*+)*#"## => {}, // long comments
} else {
    _
}

Or<A, B> = { A, B }; // A或者B
Or3<A, B, C> = { A, B, C }; // A或者B或者C
OrSwap<A, B> = { A B, B A }; // 匹配 `A B`或者`B A`
OrShl<A, B, C> = { A B C, B C A }; // 匹配`A B C`或者`B C A`, 后者是值进行左移循环得到
Wrap<Open, T, Close> = Open <T> Close; // 用于定义包裹
MTuple<T> = Wrap<"(", T, ")">;
MLTuple<L, T> = Wrap<"([", (<L> "]" <T>), ")">;
METuple<T> = Wrap<"(?", T, ")">;
MFTuple<T> = Wrap<"(%", T, ")">;
MFETuple<T> = Wrap<"(%", T, "%)">;
MList<T> = Wrap<"[", T, "]">;
MBlock<T> = Wrap<"{", T, "}">;
OpenArgs<T, S> = (<T> S)*; // 零至多个有分隔后缀值
CloseArgs<T, S>: Vec<T> = OpenArgs<T, S> T => { // 一至多个有分隔无后缀值
    let (mut args, tail) = <>;
    args.push(tail);
    args
};
OOCArgs<T, S>: Vec<T> = {
    OpenArgs<T, S>,
    CloseArgs<T, S>,
}
Span<T> = @L T @R;
#[inline]
Opt<T>: bool = T? => <>.is_some();
#[inline]
MakeDExpBody<T>: DExp = {
    <var:(<Var> ":")?> <value:T>
        => DExp::new_optional_res(var, value.into()),
    "`" <var:Var> "`" ":" <value:T>
        => DExp::new_notake(var, value.into()),
}
#[inline]
Boxed<T>: Box<T> = T => Box::new(<>);

CtrlBreakStart: () = () => meta.add_control_break_level(None);
CtrlContinueStart: () = () => meta.add_control_continue_level(None);
CtrlStart: () = () => meta.add_control_level(None, None);

CtrlBreakStop: Option<Var> = () => meta.pop_control_break_level();
CtrlContinueStop: Option<Var> = () => meta.pop_control_continue_level();
CtrlStop: (Option<Var>, Option<Var>) = () => meta.pop_control_level();

pub TopLevel: Expand = CtrlStart <mut lines:Expand> <ctrl:CtrlStop> => {
    let (break_lab, continue_lab) = ctrl;
    meta.push_some_label_to(&mut lines, break_lab);
    meta.push_some_label_to(&mut lines, continue_lab);
    lines
};

pub String: Var = r#""(?:\\\r?\n\s*(?:\\ )?|\r?\n|\\[n\\\[]|[^"\r\n\\])*""#
    => string_escape(<>).into();
pub Ident: Var = r"[_\p{XID_Start}]\p{XID_Continue}*" => <>.into();
pub OIdent: Var = r"@[_\p{XID_Start}][\p{XID_Continue}\-]*" => <>.into(); // `@abc-def`这种
pub Number: Var = r"(?:0(?:x-?[\da-fA-F][_\da-fA-F]*|b-?[01][_01]*)|-?\d[_\d]*(?:\.\d[\d_]*|e[+\-]?\d[\d_]*)?)"
    => <>.chars().filter(|&c| c != '_').collect();
// 原始字面量, 如`'@abc-def'`, 其中双引号会被替换为单引号.
// 在一对单引号内可以写任意非空字符, 可避开关键字等
pub OtherVar: Var = r"'[^'\s]+'" => {
    <>[1..<>.len()-1].replace('"', "\'").into()
};

// 逻辑里面一个单元
// 但不包含字符串
pub NoStringVar: Var = {
    Ident,
    OIdent,
    Number,
    OtherVar,
}
// 逻辑里面一个单元
// 例如`0x50` `'@alpha'` `add` `'a-b-c'`
pub Var: Var = {
    String,
    NoStringVar,
}

ValueBind: ValueBind = {
    <value:NonConstRangeValue> "." <attr:NoStringVar> => {
        ValueBind(value.into(), attr)
    },
}

ConstKey: ConstKey = {
    ValueBind => <>.into(),
    Var => <>.into(),
}

NonConstRangeValue: Value = {
    ConstKey => <>.into(),
    "`" <Var> "`" => ReprVar(<>), // 原始值
    "$" => ResultHandle,
    <value:NonConstRangeValue> <args:MList<Args?>> => {
        // QuickDExpTake
        DExp::new(meta.unnamed_var(), vec![
            LogicLine::SetArgs(args.unwrap_or_default()),
            LogicLine::SetResultHandle(value),
        ].into()).into()
    },
    "goto" <MTuple<JumpCmpOnce>> => Value::Cmper(<>.into()),
    ".." => Value::Binder,
    FEDExp => <>.into(),
    MFTuple<Value>,
    OpExprDExp => <>.into(),
    ClosuredValue => <>.into(),
    <value:NonConstRangeValue> "->" <name:NoStringVar> => {
        let target = ValueBindRefTarget::NameBind(name);
        ValueBindRef::new(value.into(), target.into()).into()
    },
    <NonConstRangeValue> "->" ".." => {
        ValueBindRef::new(<>.into(), ValueBindRefTarget::Binder).into()
    },
    <NonConstRangeValue> "->" "$" => {
        ValueBindRef::new(<>.into(), ValueBindRefTarget::ResultHandle).into()
    },
    <value:NonConstRangeValue> "->" <args:MList<Args?>> => {
        // Refed QuickDExpTake
        let value = DExp::new(meta.unnamed_var(), vec![
            LogicLine::SetArgs(args.unwrap_or_default()),
            LogicLine::SetResultHandle(value),
        ].into()).into();

        ValueBindRef::new(
            Box::new(value),
            ValueBindRefTarget::ResultHandle,
        ).into()
    },
}

pub Value: Value = {
    NonConstRangeValue,
    DExp => <>.into(),
    OpExprToValue,
    // consted-dexp
    "const" ConstStart <value:Or<ValueDExp, ("!" <Value>)>> <labels:ConstStop> => {
        let tmp_name = meta.get_tmp_var();
        let dexp_const = Const(tmp_name.clone().into(), value.into(), labels);
        DExp::new(meta.unnamed_var(), vec![
            dexp_const.into(),
            LogicLine::SetResultHandle(tmp_name.into()),
        ].into()).into()
    },
}

pub LiteralUInt: usize = <l:@L> <num:Number> <r:@R> =>? {
    let mut chars = num.chars();
    let res = if let Some('0') = chars.next() {
        match chars.next() {
            Some('x') => usize::from_str_radix(&chars.collect::<String>(), 16),
            Some('b') => usize::from_str_radix(&chars.collect::<String>(), 2),
            _ => num.parse::<usize>(),
        }
    } else {
        num.parse::<usize>()
    };
    match res {
        Ok(num) => Ok(num),
        Err(e) => Err(Error::from(([l, r], Errors::NotALiteralUInteger(num, e))).into()),
    }
};


LEnd: () = ";" => ();

JumpCmpBody: JumpCmp = {
    <OrSwap<Or<"equal", "==">, <Value>>> <Value> => JumpCmp::Equal(<>),
    <OrSwap<Or<"notEqual", "!=">, <Value>>> <Value> => JumpCmp::NotEqual(<>),
    <OrSwap<Or<"lessThan", "<">, <Value>>> <Value> => JumpCmp::LessThan(<>),
    <OrSwap<Or<"lessThanEq", "<=">, <Value>>> <Value> => JumpCmp::LessThanEq(<>),
    <OrSwap<Or<"greaterThan", ">">, <Value>>> <Value> => JumpCmp::GreaterThan(<>),
    <OrSwap<Or<"greaterThanEq", ">=">, <Value>>> <Value> => JumpCmp::GreaterThanEq(<>),
    <OrSwap<Or<"strictEqual", "===">, <Value>>> <Value> => JumpCmp::StrictEqual(<>),
    Or<"always", "_"> => JumpCmp::Always,
    // 扩展
    <OrSwap<Or<"strictNotEqual", "!==">, <Value>>> <Value> => JumpCmp::StrictNotEqual(<>),
    <Value> => JumpCmp::bool(<>),
}

// 入口
pub JumpCmp: CmpTree = CmpTree2;
pub JumpCmpOnce: CmpTree = CmpTree1;

// 可空的, 空时为总是的条件
AlwaysJumpCmp: CmpTree = JumpCmp? => <>.unwrap_or(JumpCmp::Always.into());

CmpTree1: CmpTree = {
    <deps:MBlock<LogicLine*>> "=>" <cmp:CmpTree1>
        => CmpTree::Deps(deps.into(), cmp.into()),
    <deps:MBlock<LogicLine*>?> "=>" <args:MList<Args?>> <cmp:CmpTree1> => {
        CmpTree::Deps(vec![
            InlineBlock::from(deps.unwrap_or_default()).into(),
            LogicLine::SetArgs(args.unwrap_or_default()),
        ].into(), cmp.into())
    },
    CmpTree2,
}

CmpTree2: CmpTree = {
    <a:CmpTree2> "||" <b:CmpTree3> => CmpTree::Or(Box::new(a.into()), b.into()),
    CmpTree3,
}

CmpTree3: CmpTree = {
    <a:CmpTree3> "&&" <b:CmpTree4> => CmpTree::And(Box::new(a.into()), b.into()),
    CmpTree4,
}

CmpTree4: CmpTree = {
    Or<"lnot", "!"> <CmpTree4> => <>.reverse(),
    CmpTree,
}

pub CmpTree: CmpTree = {
    JumpCmpBody => <>.into(),
    MTuple<JumpCmpOnce>,
}

pub Op: Op = {
    // 2
    <a:OrShl<Or<"add", "+">, <Value>, <Value>>> <b:Value> => Op::Add(a.0, a.1, b),
    <a:OrShl<Or<"sub", "-">, <Value>, <Value>>> <b:Value> => Op::Sub(a.0, a.1, b),
    <a:OrShl<Or<"mul", "*">, <Value>, <Value>>> <b:Value> => Op::Mul(a.0, a.1, b),
    <a:OrShl<Or<"div", "/">, <Value>, <Value>>> <b:Value> => Op::Div(a.0, a.1, b),
    <a:OrShl<Or<"idiv", "//">, <Value>, <Value>>> <b:Value> => Op::Idiv(a.0, a.1, b),
    <a:OrShl<Or<"mod", "%">, <Value>, <Value>>> <b:Value> => Op::Mod(a.0, a.1, b),
    <a:OrShl<Or<"pow", "**">, <Value>, <Value>>> <b:Value> => Op::Pow(a.0, a.1, b),
    <a:OrShl<Or<"equal", "==">, <Value>, <Value>>> <b:Value> => Op::Equal(a.0, a.1, b),
    <a:OrShl<Or<"notEqual", "!=">, <Value>, <Value>>> <b:Value> => Op::NotEqual(a.0, a.1, b),
    <a:OrShl<Or<"land", "&&">, <Value>, <Value>>> <b:Value> => Op::Land(a.0, a.1, b),
    <a:OrShl<Or<"lessThan", "<">, <Value>, <Value>>> <b:Value> => Op::LessThan(a.0, a.1, b),
    <a:OrShl<Or<"lessThanEq", "<=">, <Value>, <Value>>> <b:Value> => Op::LessThanEq(a.0, a.1, b),
    <a:OrShl<Or<"greaterThan", ">">, <Value>, <Value>>> <b:Value> => Op::GreaterThan(a.0, a.1, b),
    <a:OrShl<Or<"greaterThanEq", ">=">, <Value>, <Value>>> <b:Value> => Op::GreaterThanEq(a.0, a.1, b),
    <a:OrShl<Or<"strictEqual", "===">, <Value>, <Value>>> <b:Value> => Op::StrictEqual(a.0, a.1, b),
    <a:OrShl<Or<"shl", "<<">, <Value>, <Value>>> <b:Value> => Op::Shl(a.0, a.1, b),
    <a:OrShl<Or<"shr", ">>">, <Value>, <Value>>> <b:Value> => Op::Shr(a.0, a.1, b),
    <a:OrShl<Or<"or", "|">, <Value>, <Value>>> <b:Value> => Op::Or(a.0, a.1, b),
    <a:OrShl<Or<"and", "&">, <Value>, <Value>>> <b:Value> => Op::And(a.0, a.1, b),
    <a:OrShl<Or<"xor", "^">, <Value>, <Value>>> <b:Value> => Op::Xor(a.0, a.1, b),

    <OrSwap<"max", <Value>>> <Value> <Value> => Op::Max(<>),
    <OrSwap<"min", <Value>>> <Value> <Value> => Op::Min(<>),
    <OrSwap<"angle", <Value>>> <Value> <Value> => Op::Angle(<>),
    <OrSwap<"len", <Value>>> <Value> <Value> => Op::Len(<>),
    <OrSwap<"noise", <Value>>> <Value> <Value> => Op::Noise(<>),

    // 1
    // 此处使用`Value`来接受逻辑导出时的占位符
    <OrSwap<Or<"not", "~">, <Value>>> <Value> Value? => Op::Not(<>),
    <OrSwap<"abs", <Value>>> <Value> Value? => Op::Abs(<>),
    <OrSwap<"log", <Value>>> <Value> Value? => Op::Log(<>),
    <OrSwap<"log10", <Value>>> <Value> Value? => Op::Log10(<>),
    <OrSwap<"floor", <Value>>> <Value> Value? => Op::Floor(<>),
    <OrSwap<"ceil", <Value>>> <Value> Value? => Op::Ceil(<>),
    <OrSwap<"sqrt", <Value>>> <Value> Value? => Op::Sqrt(<>),
    <OrSwap<"rand", <Value>>> <Value> Value? => Op::Rand(<>),
    <OrSwap<"sin", <Value>>> <Value> Value? => Op::Sin(<>),
    <OrSwap<"cos", <Value>>> <Value> Value? => Op::Cos(<>),
    <OrSwap<"tan", <Value>>> <Value> Value? => Op::Tan(<>),
    <OrSwap<"asin", <Value>>> <Value> Value? => Op::Asin(<>),
    <OrSwap<"acos", <Value>>> <Value> Value? => Op::Acos(<>),
    <OrSwap<"atan", <Value>>> <Value> Value? => Op::Atan(<>),
    // 扩展(1)
    <OrSwap<Or<"lnot", "!">, <Value>>> <Value> Value? =>
        Op::Equal(<>, ReprVar(FALSE_VAR.into())),
    // 扩展(2)
    <a:OrShl<Or<"strictNotEqual", "!==">, <Value>, <Value>>> <b:Value> =>
        Op::Equal(
            a.0,
            DExp::new_nores(vec![
                Op::StrictEqual(ResultHandle, a.1, b).into()
            ].into()).into(),
            ReprVar(FALSE_VAR.into())
        ),
}

Label: Var = ":" <Var>;

NoPrefixInlineBlock: InlineBlock = MBlock<LogicLine*> => <>.into();

#[inline]
Expand: Expand = LogicLine+? => Expand(<>.unwrap_or_default());
pub LogicLine: LogicLine = {
    Control,
    BuiltinCommand,
    MBlock<Expand> => <>.into(),
    "inline" <NoPrefixInlineBlock> => <>.into(),
    Label => LogicLine::new_label(<>, meta),
    "op" <Op> LEnd => <>.into(),
    "noop" LEnd => LogicLine::NoOp,
    <l:@L> <vars:Args2> "=" <values:Args2> LEnd <r:@R>
        =>? Meta::build_sets([l, r], vars, values).map_err(|e| e.into()),
    OpExpr,
    Print,
    <Args> LEnd => LogicLine::Other(<>),
    "inline" <ArgsRepeatBlock> => <>.into(),
    Match => <>.into(),
    ConstMatch => <>.into(),
}

Match: Match = "match" <args:Args?> <cases:MBlock<(
    <MatchPat*> <("@" <MatchPat*>)?> <MBlock<LogicLine*>>
)*>> => {
    Match::new(args.unwrap_or_default(), cases.into_iter()
        .map(|(prep, sufp, body)| {
            (if let Some(sufp) = sufp {
                MatchPat::Expanded(prep, sufp)
            } else {
                MatchPat::Normal(prep)
            }, body.into())
        })
        .collect()
    )
};

MatchPat: MatchPatAtom = {
    MList<Args1> => MatchPatAtom::new_unamed(<>),
    Var => MatchPatAtom::new(<>, vec![]),
    <name:Var> ":" <pat:MList<Args1>> => MatchPatAtom::new(name, pat),
}

ConstMatch: ConstMatch
    = "const" "match" <args:Args?>
    <cases:MBlock<(
        ConstMatchPat NoPrefixInlineBlock
    )*>>
=> {
    ConstMatch::new(args.unwrap_or_default(), cases)
};

ConstMatchPat: ConstMatchPat = {
    ConstMatchPatAtom* => ConstMatchPat::Normal(<>),
    <ConstMatchPatAtom*> "@" <ConstMatchPatAtom*>
        => ConstMatchPat::Expanded(<>),
}

ConstMatchPatAtom: ConstMatchPatAtom = {
    <sr:Opt<"$">> <dotake:Opt<"*">> <name:(<Var> ":")?> <pat:MList<Args1>> => {
        ConstMatchPatAtom::new(dotake, name.unwrap_or_default(), pat, sr)
    },
    <sr:Opt<"$">> <dotake:Opt<"*">> <name:(<Var> ":")?> <pat:MList<("?" <OpExprBody>)>> => {
        ConstMatchPatAtom::new_guard(
            dotake,
            name.unwrap_or_default(),
            pat.into_value(meta),
            sr,
        )
    },
    <sr:Opt<"$">> <dotake:Opt<"*">> <name:(<Var> ":")?> <pat:MList<("*" <Args0>)>> => {
        let dexp = DExp::new(meta.unnamed_var(), vec![
            LogicLine::from(Match::new(
                Args::GLOB_ONLY,
                vec![
                    (
                        vec![MatchPatAtom::new_unamed(pat)].into(),
                        vec![
                            LogicLine::SetResultHandle(
                                Value::ReprVar("1".into())
                            ),
                        ].into(),
                    ),
                    (
                        vec![MatchPatAtom::default()].into(),
                        vec![
                            LogicLine::SetResultHandle(
                                Value::ReprVar("0".into())
                            ),
                        ].into(),
                    ),
                ]
            )),
        ].into());
        ConstMatchPatAtom::new_guard(
            dotake,
            name.unwrap_or_default(),
            dexp.into(),
            sr,
        )
    },
    <sr:Opt<"$">> <dotake:Opt<"*">> <name:Var> => {
        ConstMatchPatAtom::new(dotake, name, vec![], sr)
    },
    "$" "_" => {
        ConstMatchPatAtom::new(false, Default::default(), vec![], true)
    },
    <dotake:Opt<"*">> "_" => {
        ConstMatchPatAtom::new(dotake, Default::default(), vec![], false)
    },
}

Args: Args = {
    <prefix:Args0> "@" <suffix:Args0> => {
        Args::Expanded(prefix, suffix)
    },
    <args:Args1> => {
        args.into()
    },
}
ArgsRepeatBlock: ArgsRepeat = {
    <l:@L><chunk:LiteralUInt?><r:@R>
    "@" <block:NoPrefixInlineBlock> =>? {
        if chunk == Some(0) {
            return Err(Error::from((l, Errors::ArgsRepeatChunkByZero, r)).into())
        }
        Ok(ArgsRepeat::new(chunk.unwrap_or(1), block))
    },
    "@" <pats:ConstMatchPatAtom+> <block:NoPrefixInlineBlock> => {
        ArgsRepeat::new(pats.len(), vec![
            ConstMatch::new(Args::GLOB_ONLY, vec![
                (pats.into(), block),
            ]).into()
        ].into())
    },
}

Print: LogicLine = "print" <Args?> LEnd => {
    let Some(args) = <> else {
        // 无参数, 啥也不做
        return LogicLine::Ignore
    };
    fn one(arg: Value) -> LogicLine {
        LogicLine::Other(vec![
            ReprVar("print".into()),
            arg,
        ].into())
    }
    match args {
        Args::Normal(mut args) if args.len() == 1 => {
            // 单个参数, 老式处理
            return one(args.pop().unwrap())
        },
        Args::Normal(args) => {
            Expand(
                args.into_iter()
                    .map(|arg| one(arg))
                    .collect()
            ).into()
        },
        Args::Expanded(p, s) if p.len() == 0 && s.len() == 0 => {
            ArgsRepeat::new(1, vec![
                LogicLine::Other(Args::Expanded(
                    vec![ReprVar("print".into())],
                    vec![],
                )),
            ].into()).into()
        },
        Args::Expanded(prefix, suffix) => {
            let len = prefix.len() + 1 + suffix.len();
            let mut res = Vec::with_capacity(len);

            for arg in prefix {
                res.push(one(arg))
            }

            res.push(ArgsRepeat::new(1, vec![
                LogicLine::Other(Args::Expanded(vec![
                    ReprVar("print".into()),
                ], vec![]))
            ].into()).into());

            for arg in suffix {
                res.push(one(arg))
            }

            assert_eq!(res.len(), len);
            InlineBlock(res).into()
        },
    }
};

// 0..
Args0: Vec<Value> = {
    () => vec![],
    Args1,
}
// 1..
Args1: Vec<Value> = {
    Value => vec![<>],
    Args2,
}
// 2..
Args2: Vec<Value> = {
    Value Value => vec![<>],
    Value Value Value => vec![<>],
    Value Value Value Value => vec![<>],
    Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value Value Value Value Value Value => vec![<>],
    Value Value Value Value Value Value Value Value Value Value Value Value Value Value Value => vec![<>],
}

OpExpr: LogicLine = {
    <OpExprMultipleResult> LEnd => {
        let (mut results, value, oper) = <>;
        results.reverse();
        op_expr_build_results(meta, results, vec![value], oper)
    },
    <OpExprDoMultiple> LEnd => {
        let (mut results, values, oper) = <>;
        results.reverse();
        op_expr_build_results(meta, results, values, oper)
    },
    <OpExprTopSelfOps> LEnd,
}
#[inline]
OpExprBodySetR: Expand = OpExprBody => {
    let line = op_expr_build_results(
        meta,
        vec![ResultHandle], vec![<>],
        |meta, res, v| v.into_logic_line(meta, res),
    );
    vec![line].into()
};
#[inline]
OpExprBodyToValue: Value = OpExprBody => {
    <>.into_value(meta)
};
OpExprDExp: DExp = METuple<MakeDExpBody<OpExprBodySetR>>;
OpExprToValue: Value = MTuple<("*" <OpExprBodyToValue>)>;

OpExprAssignOper: OpExprAOperFun = {
    "+="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Add (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "-="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Sub (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "*="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Mul (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "/="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Div (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "//=" => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Idiv(tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "%="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Mod (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "**=" => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Pow (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "&&=" => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Land(tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "<<=" => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Shl (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    ">>=" => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Shr (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "|="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Or  (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "&="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::And (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "^="  => { |meta, res, v| { let tres = meta.get_tmp_var(); Expand(vec![Take(tres.clone().into(), res).into(), Op::Xor (tres.clone().into(), tres.into(), v.into_value(meta)).into()]).into() } },
    "="   => { top_assign_oper },
}

// 多个接收者的OpExpr, 例如`a, b, c = 1;`
OpExprMultipleResult: (Vec<Value>, OpExprInfo, OpExprAOperFun) = {
    <result:Value> <oper:OpExprAssignOper> <value:OpExprBody> => {
        (vec![result], value, oper)
    },
    <result:Value> "," <mut body:OpExprMultipleResult> => {
        body.0.push(result);
        body
    },
}

// 例如`a, b = 1, 2`返回`([b, a], [1, 2])`
OpExprDoMultiple: (Vec<Value>, Vec<OpExprInfo>, OpExprAOperFun) = {
    <res1:Value> "," <res2:Value>
    <oper:OpExprAssignOper>
    <val1:OpExprBody> "," <val2:OpExprBody>
        => (vec![res2, res1], vec![val1, val2], oper),

    <result:Value> "," <mut mid:OpExprDoMultiple> "," <value:OpExprBody> => {
        let (results, values, _) = &mut mid;
        results.push(result);
        values.push(value);
        mid
    },
}

OpExprBody: OpExprInfo = OpExprBody13;

OpExprBody13: OpExprInfo = {
    "if" <cmp:JumpCmp> "?" <a:OpExprBody13> ":" <b:OpExprBody13> => {
        OpExprInfo::new_if_else(meta, cmp, a, b)
    },
    OpExprBody12,
}

OpExprBody12: OpExprInfo = {
    <a:OpExprBody12> "||" <b:OpExprBody11> => op_expr_build_op(
        || Op::Add(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody11,
}

OpExprBody11: OpExprInfo = {
    <a:OpExprBody11> "&&" <b:OpExprBody10> => op_expr_build_op(
        || Op::Land(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody10,
}

OpExprBody10: OpExprInfo = {
    <a:OpExprBody9> "==" <b:OpExprBody9> => op_expr_build_op(
        || Op::Equal(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody9> "!=" <b:OpExprBody9> => op_expr_build_op(
        || Op::NotEqual(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody9> "===" <b:OpExprBody9> => op_expr_build_op(
        || Op::StrictEqual(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody9> "!==" <b:OpExprBody9> =>
        op_expr_build_op(|| Op::Equal(
            ResultHandle,
            DExp::new_nores(vec![
                Op::StrictEqual(ResultHandle, a.into_value(meta), b.into_value(meta)).into()
            ].into()).into(),
            ReprVar(FALSE_VAR.into())
        )),
    OpExprBody9,
}
OpExprBody9: OpExprInfo = {
    <a:OpExprBody8> "<" <b:OpExprBody8> => op_expr_build_op(
        || Op::LessThan(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody8> ">" <b:OpExprBody8> => op_expr_build_op(
        || Op::GreaterThan(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody8> "<=" <b:OpExprBody8> => op_expr_build_op(
        || Op::LessThanEq(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody8> ">=" <b:OpExprBody8> => op_expr_build_op(
        || Op::GreaterThanEq(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody8,
}

OpExprBody8: OpExprInfo = {
    <a:OpExprBody8> "|" <b:OpExprBody7> => op_expr_build_op(
        || Op::Or(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody7,
}

OpExprBody7: OpExprInfo = {
    <a:OpExprBody7> "^" <b:OpExprBody6> => op_expr_build_op(
        || Op::Xor(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody6,
}

OpExprBody6: OpExprInfo = {
    <a:OpExprBody6> "&" <b:OpExprBody5> => op_expr_build_op(
        || Op::And(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody5,
}

OpExprBody5: OpExprInfo = {
    <a:OpExprBody5> "<<" <b:OpExprBody4> => op_expr_build_op(
        || Op::Shl(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody5> ">>" <b:OpExprBody4> => op_expr_build_op(
        || Op::Shr(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody4,
}

OpExprBody4: OpExprInfo = {
    <a:OpExprBody4> "+" <b:OpExprBody3> => op_expr_build_op(
        || Op::Add(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody4> "-" <b:OpExprBody3> => op_expr_build_op(
        || Op::Sub(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody3,
}

OpExprBody3: OpExprInfo = {
    <a:OpExprBody3> "*" <b:OpExprBody2> => op_expr_build_op(
        || Op::Mul(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody3> "/" <b:OpExprBody2> => op_expr_build_op(
        || Op::Div(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody3> "//" <b:OpExprBody2> => op_expr_build_op(
        || Op::Idiv(ResultHandle, a.into_value(meta), b.into_value(meta))),
    <a:OpExprBody3> "%" <b:OpExprBody2> => op_expr_build_op(
        || Op::Mod(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprBody2,
}

OpExprBody2: OpExprInfo = {
    "!" <x:OpExprBody2> => op_expr_build_op(
        || Op::Equal(ResultHandle, ReprVar(FALSE_VAR.into()), x.into_value(meta))),
    "-" <x:OpExprBody2> => op_expr_build_op(
        || Op::Sub(ResultHandle, ReprVar(ZERO_VAR.into()), x.into_value(meta))),
    "~" <x:OpExprBody2> => op_expr_build_op(
        || Op::Not(ResultHandle, x.into_value(meta))),
    OpExprBody1,
}

OpExprBody1: OpExprInfo = {
    <a:OpExprAtom> "**" <b:OpExprBody1> => op_expr_build_op(
        || Op::Pow(ResultHandle, a.into_value(meta), b.into_value(meta))),
    OpExprAtom,
}

OpExprFun1<Name> = Name <MTuple<(<OpExprBody> ","?)>>;
OpExprFun2<Name> = Name <MTuple<(<OpExprBody> "," <OpExprBody> ","?)>>;


OpExprCallOp: OpExprInfo = {
    OpExprFun2<"max"> => {
        let (a, b) = <>;
        op_expr_build_op(
            || Op::Max(ResultHandle, a.into_value(meta), b.into_value(meta)))
    },
    OpExprFun2<"min"> => {
        let (a, b) = <>;
        op_expr_build_op(
            || Op::Min(ResultHandle, a.into_value(meta), b.into_value(meta)))
    },
    OpExprFun2<"angle"> => {
        let (a, b) = <>;
        op_expr_build_op(
            || Op::Angle(ResultHandle, a.into_value(meta), b.into_value(meta)))
    },
    OpExprFun2<"len"> => {
        let (a, b) = <>;
        op_expr_build_op(
            || Op::Len(ResultHandle, a.into_value(meta), b.into_value(meta)))
    },
    OpExprFun2<"noise"> => {
        let (a, b) = <>;
        op_expr_build_op(
            || Op::Noise(ResultHandle, a.into_value(meta), b.into_value(meta)))
    },

    OpExprFun1<"abs"> => {
        op_expr_build_op(
            || Op::Abs(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"log"> => {
        op_expr_build_op(
            || Op::Log(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"log10"> => {
        op_expr_build_op(
            || Op::Log10(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"floor"> => {
        op_expr_build_op(
            || Op::Floor(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"ceil"> => {
        op_expr_build_op(
            || Op::Ceil(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"sqrt"> => {
        op_expr_build_op(
            || Op::Sqrt(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"rand"> => {
        op_expr_build_op(
            || Op::Rand(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"sin"> => {
        op_expr_build_op(
            || Op::Sin(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"cos"> => {
        op_expr_build_op(
            || Op::Cos(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"tan"> => {
        op_expr_build_op(
            || Op::Tan(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"asin"> => {
        op_expr_build_op(
            || Op::Asin(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"acos"> => {
        op_expr_build_op(
            || Op::Acos(ResultHandle, <>.into_value(meta)))
    },
    OpExprFun1<"atan"> => {
        op_expr_build_op(
            || Op::Atan(ResultHandle, <>.into_value(meta)))
    },
}

OpExprAtom: OpExprInfo = {
    Value => OpExprInfo::Value(<>),
    OpExprValueSelfOps,
    MTuple<OpExprBody>,
    OpExprCallOp,
    "_" => OpExprInfo::Ref(meta.op_expr_ref()),
}
OpExprTopSelfOps: LogicLine = {
    <Value> "++" => {
        let tmp = meta.get_tmp_var();
        Expand(vec![
            Take(tmp.clone().into(), <>).into(),
            Op::Add(tmp.clone().into(), tmp.into(), ReprVar("1".into())).into(),
        ]).into()
    },
    <Value> "--" => {
        let tmp = meta.get_tmp_var();
        Expand(vec![
            Take(tmp.clone().into(), <>).into(),
            Op::Sub(tmp.clone().into(), tmp.into(), ReprVar("1".into())).into(),
        ]).into()
    },
}
OpExprSelfOpsSuf<O>: () = O => {
    OpExprInfo::add_suf_selfop_handle_to_meta(meta);
};
OpExprValueSelfOps: OpExprInfo = {
    "++" <Value> => {
        OpExprInfo::Value(DExp::new(meta.unnamed_var(), vec![
            LogicLine::SetResultHandle(<>),
            Op::Add(ResultHandle, ResultHandle, ReprVar("1".into())).into(),
        ].into()).into())
    },
    "--" <Value> => {
        OpExprInfo::Value(DExp::new(meta.unnamed_var(), vec![
            LogicLine::SetResultHandle(<>),
            Op::Sub(ResultHandle, ResultHandle, ReprVar("1".into())).into(),
        ].into()).into())
    },
    <Value> OpExprSelfOpsSuf<"++"> <MTuple<Boxed<OpExprBody>>?> => {
        OpExprInfo::new_suf_selfop(
            meta,
            Op::Add(ResultHandle, ResultHandle, ReprVar("1".into())),
            <>,
        )
    },
    <Value> OpExprSelfOpsSuf<"--"> <MTuple<Boxed<OpExprBody>>?> => {
        OpExprInfo::new_suf_selfop(
            meta,
            Op::Sub(ResultHandle, ResultHandle, ReprVar("1".into())),
            <>,
        )
    },
}

// 开始一个const, 开启了必须负责清理
ConstStart: () = () => meta.add_label_scope();
ConstStop: Vec<Var> = () => Vec::from_iter(meta.pop_label_scope());

pub BuiltinCommand: LogicLine = {
    "const" <mut values:(<ConstKey> "=" ConstStart <Value> <ConstStop>)+> LEnd
    => {
        if values.len() == 1 {
            let (var, value, labels) = values.pop().unwrap();
            Const(var, value, labels).into()
        } else {
            let mut res = Vec::with_capacity(values.len());
            for (var, value, labels) in values {
                let r#const = Const(var, value, labels);
                res.push(r#const.into());
            }
            InlineBlock(res).into()
        }
    },

    "take" <args:MList<Args?>> <var:(<Var> "=")?> <value:Value> LEnd => {
        let do_leak_res = var.is_some();

        Take::new(
            args.unwrap_or_default(),
            var.unwrap_or_else(|| meta.unnamed_var()),
            do_leak_res,
            value
        )
    },

    "take"
    <mut takes:(<(<ConstKey> "=")?> <Value>)+>
    LEnd => {
        if takes.len() == 1 {
            let (res, value) = takes.pop().unwrap();
            let res = res.unwrap_or_else(|| meta.unnamed_var().into());
            return Take(res, value).into();
        }
        let mut lines = Vec::with_capacity(takes.len());
        for (res, value) in takes.into_iter() {
            let res = res.unwrap_or_else(|| meta.unnamed_var().into());
            let take = Take(res, value);
            lines.push(take.into())
        }
        InlineBlock(lines).into()
    },

    "setres" <Value> LEnd => LogicLine::SetResultHandle(<>),
}

BlockExpand: Expand = MBlock<Expand> => <>;
pub Block: LogicLine = BlockExpand => <>.into();

pub DExp: DExp = MTuple<MakeDExpBody<Expand>>;
FEDExp: DExp = MFETuple<MakeDExpBody<Expand>>;
#[inline]
ValueDExp: Value = DExp => <>.into();

ClosuredValueCatch: ClosuredValueMethod = {
    <name:Var> => Take(name.clone().into(), name.into()).into(),
    <name:Var> ":" <val:Value> => Take(name.into(), val).into(),

    "&" <name:Var> => Const(name.clone().into(), name.into(), Vec::new()).into(),
    "&" <name:Var> ":" ConstStart <val:Value> <labels:ConstStop>
        => Const(name.into(), val, labels).into(),
}
ClosuredValue: ClosuredValue = {
    MLTuple<
        (
            ClosuredValueCatch*
            ("|" <Label*>)?
        ),
        (ConstStart <Value> <ConstStop>),
    > => {
        let ((catchs, catch_labels), (value, labels)) = <>;
        ClosuredValue::Uninit {
            catch_values: catchs,
            catch_labels: catch_labels.unwrap_or_default(),
            value: value.into(),
            labels,
        }
    },
}

SwitchCatchFlag: SwitchCatch = {
    "<" => SwitchCatch::Underflow,
    "!" => SwitchCatch::Misses,
    ">" => SwitchCatch::Overflow,
    MTuple<JumpCmp> => SwitchCatch::UserDefine(<>),
}

ControlBlock: Expand = {
    "break" <bang:"!"?>
    CtrlBreakStart <lines:Or<ControlBlock, BlockExpand>> <ctrl:CtrlBreakStop>
    => {
        let mut res = Vec::with_capacity(2);
        if bang.is_none() {
            res.push(lines.into());
            meta.push_some_label_to(&mut res, ctrl);
        } else {
            meta.push_some_label_to(&mut res, ctrl);
            res.push(lines.into());
        }
        res.into()
    },
    "continue" <bang:"!"?>
    CtrlContinueStart <lines:Or<ControlBlock, BlockExpand>> <ctrl:CtrlContinueStop>
    => {
        let mut res = Vec::with_capacity(2);
        if bang.is_none() {
            meta.push_some_label_to(&mut res, ctrl);
            res.push(lines.into());
        } else {
            res.push(lines.into());
            meta.push_some_label_to(&mut res, ctrl);
        }
        res.into()
    },
}

pub Control: LogicLine = {
    ControlWithoutOptionalEnd,
    ControlWithOptionalEnd,
}
ControlBody: LogicLine = {
    Control,
    Block,
}
GSwitchCase: GSwitchCase = {
    <skip_extra:Opt<"*">> <ids:Args?> <guard:("if" <JumpCmp>)?> => GSwitchCase::Normal { skip_extra, ids: ids.unwrap_or_default(), guard },
    <skip_extra:Opt<"*">> "<" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: true, missed: false, overflow: false, to },
    <skip_extra:Opt<"*">> "!" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: false, missed: true, overflow: false, to },
    <skip_extra:Opt<"*">> ">" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: false, missed: false, overflow: true, to },
    <skip_extra:Opt<"*">> "<" "!" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: true, missed: true, overflow: false, to },
    <skip_extra:Opt<"*">> "!" ">" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: false, missed: true, overflow: true, to },
    <skip_extra:Opt<"*">> "<" ">" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: true, missed: false, overflow: true, to },
    <skip_extra:Opt<"*">> "<" "!" ">" <to:ConstKey?> => GSwitchCase::Catch { skip_extra, underflow: true, missed: true, overflow: true, to },
}
ControlWithoutOptionalEnd: LogicLine = {
    "goto" <Label> <AlwaysJumpCmp> LEnd => {
        Goto(<>).into()
    },

    "break" <AlwaysJumpCmp> LEnd => {
        Goto(meta.get_break().clone(), <>).into()
    },

    "continue" <AlwaysJumpCmp> LEnd => {
        Goto(meta.get_continue().clone(), <>).into()
    },

    ControlBlock => <>.into(),

    "skip" <cmp:JumpCmp> <body:LogicLine> => {
        let lab = meta.get_tag();
        Expand(vec![
            Goto(lab.clone(), cmp).into(),
            body,
            LogicLine::new_label(lab, meta),
        ]).into()
    },

    "skip" <body:BlockExpand> => {
        let lab = meta.get_tag();
        Expand(vec![
            Goto(lab.clone(), JumpCmp::Always.into()).into(),
            body.into(),
            LogicLine::new_label(lab, meta),
        ]).into()
    },

    "while" <cmp:JumpCmp> CtrlStart <body:LogicLine> <ctrl:CtrlStop> => {
        let (break_lab, continue_lab) = ctrl;
        let [end, head] = [meta.get_tag(), meta.get_tag()];
        let rev_cmp = cmp.clone().reverse();
        let mut res = Vec::with_capacity(7);

        res.extend([
            Goto(end.clone(), rev_cmp).into(),
            LogicLine::new_label(head.clone(), meta),
            body,
        ]);
        meta.push_some_label_to(&mut res, continue_lab);
        res.extend([
            Goto(head, cmp).into(),
            LogicLine::new_label(end, meta),
        ]);
        meta.push_some_label_to(&mut res, break_lab);

        Expand(res).into()
    },

    "do" CtrlStart <body:ControlBody> <ctrl:CtrlStop> "while" <cmp:AlwaysJumpCmp> LEnd => {
        let (break_lab, continue_lab) = ctrl;
        let head = meta.get_tag();
        let mut res = Vec::with_capacity(5);

        res.extend([
            LogicLine::new_label(head.clone(), meta),
            body,
        ]);
        meta.push_some_label_to(&mut res, continue_lab);
        res.push(Goto(head, cmp).into());
        meta.push_some_label_to(&mut res, break_lab);

        Expand(res).into()
    },

    "gwhile" <cmp:JumpCmp> CtrlStart <body:LogicLine> <ctrl:CtrlStop> => {
        let (break_lab, continue_lab) = ctrl;
        let [to, head] = [meta.get_tag(), meta.get_tag()];
        let mut res = Vec::with_capacity(7);

        res.extend([
            Goto(to.clone(), JumpCmp::Always.into()).into(),
            LogicLine::new_label(head.clone(), meta),
            body,
            LogicLine::new_label(to, meta),
        ]);
        meta.push_some_label_to(&mut res, continue_lab);
        res.push(Goto(head, cmp).into());
        meta.push_some_label_to(&mut res, break_lab);

        Expand(res).into()
    },

    "gswitch" <value:Value>
    CtrlStart
    <cases:MBlock<(
        <Expand> // append line
        <(
            "case" <GSwitchCase> ":"
            <Expand>
        )+>
    )>>
    <ctrl:CtrlStop>
    => {
        let (extra, cases) = cases;
        let (break_lab, continue_lab) = ctrl;

        let mut lines = vec![GSwitch { value, extra, cases }.into()];
        meta.push_some_label_to(&mut lines, break_lab);
        meta.push_some_label_to(&mut lines, continue_lab);
        <[_; 1]>::try_from(lines)
            .map(|[line]| line)
            .unwrap_or_else(|lines| {
                InlineBlock(lines).into()
            })
    },

    "switch" <value:Value>
    CtrlStart
    <cases:MBlock<(
        <LogicLine*> // append line
        <( // catch 拦截
            "case"
            <SwitchCatchFlag+> // 捕获模式, 至少有一个
            // 可选的Var,
            // 会在捕获块头部使用const将该Var映射至已经求出的case跳转目标
            <Var?>
            ":"
            <Expand>
        )*>
        <( // cases
            "case"
            <LiteralUInt*>
            ":"
            <Expand>
        )+>
    )>>
    <ctrl:CtrlStop>
    => {
        let (mut append, catchs, cases) = cases;
        let catchs_is_empty = catchs.is_empty();

        let mut next_case_num = 0;
        let case_num_max = cases
            .iter()
            .map(
                |(nums, _)| {
                    let num = nums
                        .iter()
                        .max()
                        .copied()
                        .unwrap_or(next_case_num);
                    next_case_num = num + 1;
                    num
                }
            )
            .max()
            .unwrap();

        // 用于填充填充case的行, 如果有追加在末尾的行则将其封装并替换填充
        let (mut fill_line, append) = match &append[..] {
            [] => (LogicLine::Ignore, None),
            [_] => (
                Expand(vec![append.last().unwrap().clone()]).into(),
                append.pop().unwrap().into(),
            ),
            [..] => (
                Expand(append.clone()).into(),
                Some(Expand(append).into()),
            ),
        };

        // 用于添加到头部的捕获块
        let mut catch_lines = Vec::new();
        let value_handle: Var = if catchs_is_empty {
            Var::new()
        } else { meta.get_tmp_var() };

        // 这里开始遍历捕获
        // 如果遇到了未命中捕获, 则改变fill_line为总是跳转到未命中捕获
        for (flags, name, lines) in catchs {
            let mut out_block = Vec::new();
            let skip_cmp = CmpTree::new_ands(
                flags
                    .into_iter()
                    .filter(|flag| {
                        if flag.is_misses() {
                            // 是一个未命中捕获
                            let tag = meta.get_tag();
                            out_block.push(LogicLine::new_label(tag.clone(), meta));
                            fill_line = Goto(tag, JumpCmp::Always.into()).into();
                            false // 已处理, 过滤掉
                        } else {
                            true
                        }
                    })
                    .map(|flag|
                        flag.build(value_handle.as_str().into(), case_num_max)
                    )
            ).unwrap_or(JumpCmp::Always.into());
            let skip_tag = meta.get_tag();
            out_block.insert(0, Goto(skip_tag.clone(), skip_cmp).into());
            if let Some(name) = name {
                // 如果有捕获变量则使用一个const进行映射
                // 这需要插入在头部, 也就是条件前
                // 防止`case (a) a:`时, a还没被const就进行了判断
                out_block.insert(
                    0,
                    Const::new(
                        name.into(),
                        value_handle.as_str().into()
                    ).into()
                )
            }
            out_block.push(lines.into());
            out_block.push(LogicLine::new_label(skip_tag, meta));

            catch_lines.push(Expand(out_block).into())
        }

        let mut cases_res = Vec::with_capacity(case_num_max + 1);
        let mut cases_res_isline = vec![false; case_num_max + 1];

        let mut next_ignored_num = 0;
        for (mut nums, mut expand) in cases {
            if let Some(append) = &append {
                expand.push(append.clone())
            }
            if nums.is_empty() { nums.push(next_ignored_num) }
            for num in nums {
                for _ in cases_res.len()..=num {
                    cases_res.push(LogicLine::Ignore);
                }
                cases_res[num] = expand.clone().into();
                cases_res_isline[num] = true;
                next_ignored_num = num + 1;
            }
        }
        // 将填充行填入填充case
        let mut iter = cases_res_isline.into_iter().enumerate().peekable();
        while let Some((idx, is_line)) = iter.next() {
            if is_line { continue }
            match iter.peek() {
                Some((_, true)) => cases_res[idx] = fill_line.clone(),
                _ => (),
            }
        }
        debug_assert_eq!(cases_res.len(), case_num_max + 1);
        debug_assert_eq!(cases_res.len(), cases_res.capacity());

        let (break_lab, continue_lab) = ctrl;
        if catchs_is_empty {
            // 没有捕获块
            let mut res = Vec::with_capacity(3);

            meta.push_some_label_to(&mut res, continue_lab);
            res.push(Select(value, Expand(cases_res)).into());
            meta.push_some_label_to(&mut res, break_lab);

            if res.len() == 1 {
                res.pop().unwrap()
            } else {
                Expand(res).into()
            }
        } else {
            // 有捕获块
            // 保证我们拿到了一个临时返回句柄, 而不是一个空值
            assert_ne!(&value_handle, "");
            let mut res = Vec::with_capacity(5);

            meta.push_some_label_to(&mut res, continue_lab);
            res.extend([
                // 求值
                Take(value_handle.as_str().into(), value).into(),
                // 捕获
                Expand(catch_lines).into(),
                // 主体
                Select(value_handle.into(), Expand(cases_res)).into()
            ]);
            meta.push_some_label_to(&mut res, break_lab);

            Expand(res).into()
        }
    },

    "select" <value:Value> CtrlStart <lines:BlockExpand> <ctrl:CtrlStop> => {
        let (break_lab, continue_lab) = ctrl;
        let mut res = Vec::with_capacity(3);

        meta.push_some_label_to(&mut res, continue_lab);
        res.push(Select(value, lines).into());
        meta.push_some_label_to(&mut res, break_lab);

        if res.len() == 1 {
            res.pop().unwrap()
        } else {
            Expand(res).into()
        }
    },
}

ControlWithOptionalEnd: LogicLine = {
    "if" <cmp:JumpCmp> <body:Block>
        <elifs:("elif" <JumpCmp> <Block>)*>
        <else_body:("else" <LogicLine>)?> => {

        // 对于没有elif和else的直接优化成skip
        if elifs.is_empty() && else_body.is_none() {
            let lab = meta.get_tag();
            return Expand(vec![
                Goto(lab.clone(), cmp.reverse()).into(),
                body,
                LogicLine::new_label(lab, meta),
            ]).into()
        }

        let end = meta.get_tag();
        let true_start = meta.get_tag();
        let mut elif_tags = Vec::with_capacity(elifs.len());
        elif_tags.extend((0..elifs.len()).map(|_| meta.get_tag())); // build elif tags
        let (mut elif_cmps, mut elif_bodys) = (
            Vec::with_capacity(elifs.len()),
            Vec::with_capacity(elifs.len())
        );
        let elif_count = elifs.len();
        for (cmp, body) in elifs {
            elif_cmps.push(cmp);
            elif_bodys.push(body);
        }
        debug_assert_eq!(elif_cmps.len(), elif_count);

        let mut res = Vec::new();
        res.push(Goto(true_start.clone(), cmp).into()); // true jump
        for (cmp, tag) in elif_cmps.into_iter().zip(&elif_tags) {
            res.push(Goto(tag.clone(), cmp).into()); // true jump
        }
        else_body.map(|body| res.push(body));
        res.push(Goto(end.clone(), JumpCmp::Always.into()).into()); // jump always to end

        // elif body
        for (tag, body) in elif_tags.into_iter().zip(elif_bodys) {
            res.push(LogicLine::new_label(tag, meta));
            res.push(body);
            res.push(Goto(end.clone(), JumpCmp::Always.into()).into()); // jump always to end
        }

        // true body
        res.push(LogicLine::new_label(true_start, meta));
        res.push(body);
        res.push(LogicLine::new_label(end, meta));

        Expand(res).into()
    },
}
// vim:nowrap
