const Once = (
    const $.F = _0;
    const $.V = (__:
        take Value = ...F;
        take ...V = Value;
        setres Value;
    );
);

const DisplayCore = (match @ => S {
    take*L2, L3, L4, L5 = S*2, S*3, S*4, S*5;
    take*NS, NL2, NL3 = -S, -L2, -L3;

    const $.Display = ([L2 L3 L4 L5 NS NL2 NL3](
        take LBX=Once[(?X-L2)]      LBY=Once[Y]
             LMX=Once[LBX.V]        LMY=Once[(?Y+L2)]
             RBX=Once[X]            RBY=Once[Y]
             RMX=Once[X]            RMY=Once[LMY.V]
             RTX=Once[X]            RTY=Once[(?Y+L4)]
             RCX=Once[X]            RCY=Once[(?Y+L3)]
             AX =Once[(?X-S)]
        ;

        # t:y+2l, m:y+l, b:y, f:y+s[2s], c:m+s[2s]
        # n=b[2s], a=m[2s], g=f[2s], upper=?[s]
        # (a ?)=[2s] (a upper)=[1s] repeat=[5s] upper repeat=[4s]

        inline@{
            match @ {
                [t]  { draw rect RTX.V RTY.V NL3 S 0 0; }
                [m]  { draw rect RMX.V RMY.V NL3 S 0 0; }
                [b]  { draw rect RBX.V RBY.V NL3 S 0 0; }
                [rb] { draw rect RBX.V RBY.V NS L3 0 0; }
                [lb] { draw rect LBX.V LBY.V NS L3 0 0; }
                [rt] { draw rect RMX.V RMY.V NS L3 0 0; }
                [lt] { draw rect LMX.V LMY.V NS L3 0 0; }

                [aT] { draw rect AX.V  RTY.V NS  S 0 0; }
                [at] { draw rect AX.V  RTY.V NL2 S 0 0; }
                [am] { draw rect AX.V  RMY.V NL2 S 0 0; }
                [la] { draw rect LMX.V LMY.V NS L2 0 0; }
                [lA] { draw rect LMX.V LMY.V NS  S 0 0; }
                [ra] { draw rect RMX.V RMY.V NS L2 0 0; }
                [rA] { draw rect RMX.V RMY.V NS  S 0 0; }
                [rc] { draw rect RCX.V RCY.V NS L2 0 0; }
                [rC] { draw rect RCX.V RCY.V NS  S 0 0; }
                [rn] { draw rect RBX.V RBY.V NS L2 0 0; }
                [rN] { draw rect RBX.V RBY.V NS  S 0 0; }
                [rr] { draw rect RBX.V RBY.V NS L5 0 0; }
                [ll] { draw rect LBX.V LBY.V NS L5 0 0; }
                [rR] { draw rect RBX.V RBY.V NS L4 0 0; }
                [lL] { draw rect LBX.V LBY.V NS L4 0 0; }
                Other {
                    take Builtin.Err["Unknown line"];
                    take Builtin.Err[Other];
                }
            }
        }
    ));
});
const DrawNum = (
    # 粗细为2的整数数显, 给定显示右下角, 用负方向显示
    match @ {
        X Y Num {}
        @ {
            take Builtin.Err["DrawNum argc err"];
            take N=Builtin.ArgsLen[] Builtin.Err[N];
        }
    }
    take X = ({$ = X;});

    take S = 2; # Size
    take*Offset = S*4;

    const Display = DisplayCore[S]->Display;

    do {
        take N = (?Num%10);

        switch N {
            break;
        case: take Display[t b ll rr];
        case: take Display[rr];
        case: take Display[t rt m lb b];
        case: take Display[t m b rr];
        case: take Display[lt m rr];
        case: take Display[t lt m rb b];
        case: take Display[t ll m rb b];
        case: take Display[t rr];
        case: take Display[t m b ll rr];
        case: take Display[t lt rr m b];
        }
        Num //= 10;
        X -= Offset;
    } while Num > 0;
);

const DrawRect = (
    match @ { Ratio X Y Wid High {} @ { take Builtin.Err["DrawRect err"]; } }
    take IWid = (?Wid-(4));
    take Len = (?ceil(Ratio*IWid));
    draw rect (?X+2+IWid-Len) (?Y+2) Len (?High-(4)) 0 0;
    draw color 0xff 0xeb 0xe9 0xff 0 0;
    draw lineRect X Y Wid High 0 0;
);

take PowerNode = node1;

sensor pwcap PowerNode @powerNetCapacity;
sensor pwstored PowerNode @powerNetStored;
sensor pwin PowerNode @powerNetIn;
sensor pwout PowerNode @powerNetOut;

pwstore_r = pwstored / pwcap;
bench = max(pwin, pwout);
pwin_r, pwout_r = pwin/bench, pwout/bench;

draw clear 0x2e 0x4c 0x6d 0 0 0;

draw color 0xff 0xa4 0x00 0xff 0 0;
take DrawRect[pwstore_r 15 37 58 6];

draw color 0x77 0xd9 0x70 0xff 0 0;
draw rect 7 45 2 8 0 0;
draw rect 4 48 8 2 0 0;
take DrawNum[73 55 pwin];
take DrawRect[pwin_r 15 45 58 8];

draw color 0xf0 0x54 0x54 0xff 0 0;
draw rect 4 30 8 2 0 0;
take DrawNum[73 15 pwout];
take DrawRect[pwout_r 15 27 58 8];

drawflush display1;
