#**
* 这是在0.10.0版本加入的语法
* 可以有效的把数据组织起来
* 作用是将一个Var按照特定格式绑定到一个Value的句柄
* 语法为 `NonDExpValue "." NoStringVar`, 例如`$.data` `foo.bar`
* 这里需要注意的是, 其左值的句柄不能为字符串, 否则会报错
*
* 在0.14.3版本将其扩展, 使其可以出现在take和const目标中, 并且会添加至全局作用域
* 当局部作用域都没有命中时, 将会尝试命中全局作用域
*
* 需要注意的是, 最佳实践中最好被绑定的量仅为匿名量, 否则可能会造成一定的混乱.
* 因为那时候或许难以区分哪些是展开为同一个量的值, 而值绑定是绑定在其句柄,
* 也就是展开的量上的
*
* 这个功能扩展主要是配合match使用的,
* 对于主要关注其量为变量的情况, 这很可能导致生命周期的模糊边界,
* 可能为项目增加额外的复杂度, 谨慎使用
*#

const Human_new = (
    take Name = _0;
    take Age = _1;

    $ $.age = Name, Age;
);

take["jack" 18] Human = Human_new;
print Human Human.age;
#* >>>
set __2 "jack"
set __3 18
print __2
print __3
*#
# 可以看到, 我们将额外的age绑定到了我们的Human
# 这可以用来组织一些复杂结构


# 这是一个复数的示例
const Complex_new = (
    take RNum = _0;
    take INum = _1;

    $ $.i = RNum, INum;
);
const Complex_add = (
    take Num1 = _0;
    take Num2 = _1;

    op $ Num1 + Num2;
    op $.i Num1.i + Num2.i;
);

take[3 5] Num1 = Complex_new;
take[2 8] Num2 = Complex_new;
take[Num1 Num2] Num3 = Complex_add;
print Num3 "," Num3.i;
#* >>>
set __2 3
set __3 5
set __6 2
set __7 8
op add __10 __2 __6
op add __11 __3 __7
print __10
print ","
print __11
*#
# 可以看到, 这可以使我们方便的组织数据


const Foo = (
    take $.X = _0;
);
print Foo[2].X;
#* >>>
print 2
*#
# 全局作用域并不受局部作用域限制


const Foo = (
    const $.F = (
        print "foo";
    );
    print "bar";
);
take R = Foo;
print "---";
take R.F;
#* >>>
print "bar"
print "---"
print "foo"
*#
# 使用const直接将值传出而不take
