#**
* 一种在常量时间内直接跳转至第不小于零的整数代码段的分支选择方式
*
* case后面接的是id, 表明了第几段代码, 可以写多个
* 如果不写的话, 则为上一段代码的id+1, 没有上一段代码的话则为0
*#

i = 4;
switch i {
    case 1 2:
        print "1 or 2\n";
        print "foo";
        break;
    case: # 省略
        print "3\n";
        break;
    case 5:
        print "5\n";
    case 4:
        print "4\n";
        print "穿透到5\n";
}
printflush message1;
#* 以上代码会生成如下结构:
set i 4
op mul __0 i 3
op add @counter @counter __0
noop
noop
noop
print "1 or 2\n"
print "foo"
jump 21 always 0 0
print "1 or 2\n"
print "foo"
jump 21 always 0 0
print "3\n"
jump 21 always 0 0
noop
print "4\n"
print "穿透到5\n"
noop
print "5\n"
noop
noop
printflush message1
*#
# 可以看到, 我们在case尾部不跳出, 我们就会进入到下一个case.
# 而匹配只有头部的一次, 所以会造成这种穿透.
# 这种穿透有好有坏, 但是请注意: 无论你case怎样写, 总是向下一个更大的case穿透
# 看起来case 5在case 4上方, 但其实case 5会被编译到case 4下方.
