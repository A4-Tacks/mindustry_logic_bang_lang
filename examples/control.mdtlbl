# 控制语句
# 如while do_while skip if elif goto的条件都是用的Cmp
# Cmp的格式为 Value cmp Value.
# 当然, 有几个特例. 如`_`是always, Value是会展开为 ... != false
# 对于这些比较符, 都进行了映射. 我们不用去输入equal notEqual lessThanEq这样的
# 只需要输入 == != <= 即可
n = 2;
if n < 0 {
    print "n < 0";
} elif n == 1 {
    print "n == 1";
} elif n > 0 {
    print "n > 0";
} else
    print "n == 0";
end;

#* 以上代码会被展开为
set n 2
jump 10 lessThan n 0
jump 6 equal n 1
jump 8 greaterThan n 0
print "n == 0"
jump 11 always 0 0
print "n == 1"
jump 11 always 0 0
print "n > 0"
jump 11 always 0 0
print "n < 0"
end
*#

skip n > 5 {
    print "! (n > 5)";
}
end;

#* 以上代码会被展开为
jump 2 greaterThan n 5
print "! (n > 5)"
end
*#
# 由此可以看到, skip相当于构建了一个跨越这个块的goto


while n < 2 {
    op n n + 1;
}
end;

#* 以上代码会被展开为
jump 3 greaterThanEq n 2
op add n n 1
jump 1 lessThan n 2
end
*#
# 由上述代码可以看出, while是由一个相反条件跳过循环体, 并在循环体末尾跳到循环体首部
# 不采用第一句始终goto到条件起始位置而是对其取反是为了取得最高的效率, 完成零开销
#   但是这是有代价的, 这样的话, 就没法在条件比较的内部进行if while等了
#   因为这些都会生成内部跳转内部的goto, 而这里对条件包括表达式在内进行了克隆
#   也就是说这些内部goto的目标都会变成两个地点, 所以会报错
#   解决方法也有, 将需要在内部进行跳转的DExp使用const进行封装,
#       const有重命名内部跳转的功能

do {
    op n n + 1;
} while n < 6;

#* 以上代码会被展开为
op add n n 1
jump 0 lessThan n 6
*#
# 由上述代码可以看出, do_while就是单纯往回跳完成循环

:x
op n n + 1;
goto :x n < 9;

#* 以上代码会被展开为
op add n n 1
jump 0 lessThan n 9
*#
# 就如同do_while一样, 我们手动完成了它


i = 0;
gwhile i < 10 {
    op i i + 1;
}

#* >>>
set i 0
jump 3 always 0 0
op add i i 1
jump 2 lessThan i 10
*#
# 这是为了避免普通while进行条件复制带来的副作用与代码膨胀而诞生的
# 可以看到, 头部并不是对条件反转然后跳过循环体而是直接跳到条件部分
#   然后就是一个do_while结构
# 也就是说它的结构为
i = 0;
goto :x1 _;
do {
    op i i + 1;
    :x1
} while i < 10;
#* >>>
set i 0
jump 3 always 0 0
op add i i 1
jump 2 lessThan i 10
*#
# 它的缺点是, 需要多一条跳转, 所以这导致while并没有采用这种形式
# 当然, 在手写逻辑时, 我们很喜欢这么写, 因为比较省力
