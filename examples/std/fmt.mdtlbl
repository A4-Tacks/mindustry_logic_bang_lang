const Ln2Value = 0.6931471805599453;

const PrintLowerHexChar = (
    #**
    * 打印一个小写十六进制数
    * # params
    * - Num: 给定的数, 范围为0..16
    *#
    take Num = _0;
    printchar (read $ "0123456789abcdef" Num);
);

const PrintUpperHexChar = (
    #**
    * 打印一个大写十六进制数
    * # params
    * - Num: 给定的数, 范围为0..16
    *#
    take Num = _0;
    printchar (read $ "0123456789ABCDEF" Num);
);

const PrintNegativeChar = (
    #**
    * 如果传入一个正数, 原样传出
    * 如果传入一个负数, 将其去除负号并打印一个负号
    * # params
    * - Num: 传入的数, 会被直接改变哦
    *
    * # result
    * 直接返回Num被take的句柄
    *#

    take Num = _0;
    setres Num;

    if Num < 0 {
        op Num Num * -1;
        print "-";
    }
);

const Log2 = (
    take Num = _0;
    op $ (op $ log Num;) / Ln2Value;
);

const Bit64HighOne = (
    #**
    * 使用`floor(log2(n))`获取64bit正整数数中最高位1的索引
    * 如果输入`Num <= 0`返回0
    * # params
    * * Num: 给定的大于0的数, 它会被直接进行更改
    *   如果你之后还要使用可以传入`($ = n;)`
    * 由于在Mindustry中, op运算都是同时间, 而op有log, 那么我们可以直接使用log2
    *#
    take Num = _0;

    $ = floor(Log2[Num]);
);

const PrintUpperHex = (
    #**
    * 以大写形式打印一个数的十六进制形式
    * 例如`-79`会被打印`-4F`
    * # params
    * - Num: 被格式化的数, 它会被消耗
    *#
    take Num = _0;

    take[Num] PrintNegativeChar;
    take[($ = Num;)] HighOne = Bit64HighOne;
    # 此处如果HighOne不是4的倍数, 那么Base将被下取到4的倍数
    take Base = (op $ HighOne & 0xFFFF_FFFF_FFFF_FFFC;);
    while Base >= 0 {
        take HexCode = (
            op $ Num >> Base;
            op $ $ & 0xF;
        );
        take[HexCode] PrintUpperHexChar;
        op Base Base - 4;
    }
);

const PrintLowerHex = (
    #**
    * 以小写形式打印一个数的十六进制形式
    * 例如`-79`会被打印`-4f`
    * # params
    * - Num: 被格式化的数, 它会被消耗
    *#
    take Num = _0;

    take[Num] PrintNegativeChar;
    take[($ = Num;)] HighOne = Bit64HighOne;
    # 此处如果HighOne不是4的倍数, 那么Base将被下取到4的倍数
    take Base = (op $ HighOne & 0xFFFF_FFFF_FFFF_FFFC;);
    while Base >= 0 {
        take HexCode = (
            op $ Num >> Base;
            op $ $ & 0xF;
        );
        take[HexCode] PrintLowerHexChar;
        op Base Base - 4;
    }
);

const PrintBinary = (
    #**
    * 打印一个数的二进制形式,
    * 例如`0b1011`会被打印为`1011`
    * # params
    * - Num: 被格式化的数, 它会被消耗
    *#

    take Num = _0;

    take[Num] PrintNegativeChar;
    take[($ = Num;)] Base = Bit64HighOne;

    while Base > 0 {
        print (
            op $ Num >> Base;
            op $ $ & 1;
        );
        op Base Base - 1;
    }

    print (op $ Num & 1;);
);

const PrintOctal = (
    #**
    * 打印一个数的八进制形式,
    * 例如`751`会被打印为`1357`
    * # params
    * - Num: 被格式化的数, 它会被消耗
    *#

    take Num = _0;

    take[Num] PrintNegativeChar;
    take[($ = Num;)] HighOne = Bit64HighOne;
    # 此处如果HighOne不是4的倍数, 那么Base将被下取到3的倍数
    take Base = (
        op $ HighOne // 3;
        op $ $ * 3;
    );
    while Base >= 0 {
        take Code = (
            op $ Num >> Base;
            op $ $ & 7;
        );
        print Code;
        op Base Base - 3;
    }
);

const PrintF = (match @ {
    #**
    * 使用高版本API format进行方便的格式化填入
    * 例如 take PrintF["a: {0}, b: {1}" 233 255];
    *#
    Fmt @ {
        print Fmt;
        inline@ Arg {
            format Arg;
        }
    }
});
