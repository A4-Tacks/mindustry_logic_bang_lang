#**
* 虽然直接展开代码可以无性能损耗, 但是如果行数过多,
* 我们就需要考虑原生逻辑中常用的封装方法: 函数 了
* 函数虽然相对来说限制很多, 只能传普通值, 速度慢等
* 但是节省代码行数很有效
*
* 如果要使用可以直接将这部分复制粘贴到你的代码中, 非常方便
*#

Builtin.BindSep! '.';
Builtin.MissesMatch! 1;

const Function = (const match @ => *@ F {
    take B = $;
    take DeclStat = null;

    take I=0;
    inline 0@ {
        take*I=I+1;
        match @ {
            [@declare] @ { take DeclStat = @declare; }
            [@define] B @ { take*I=I+1; take DeclStat = @define; }
            @ { take*I=I- 1; Builtin.StopRepeat!; }
        }
    }
    Builtin.SliceArgs! I *Builtin.ArgsLen[];

    match DeclStat { [null @declare] {} [@define] {
        B.define_line = @counter + 1;
    } }
    match DeclStat { [@declare] {} [null @define] {
        goto :end;
    } }
    {
        const B.Return = (const match @ {
            {
                @counter = ...ret_counter;
            }
            F {
                F! ..->ret_counter;
            }
        });
        const B.DefaultReturn = B->Return;
        const B.Body = F;
        const B.Expander = (
            ...Body! @;
            ...DefaultReturn!;
        );
        const B.RawCall = (match @ {
            {
                ...Goto!;
                setres ...result;
            }
        });
        inline@ Arg {
            take Handle = Builtin.BindHandle2[`B` Arg];
            const B.Expander = ([Handle &E:B->Expander](
                setres E[Handle @];
            ));
            const B.RawCall = ([Handle &C:B->RawCall](match @ {
                @ Fst {
                    match Fst { [Handle] {} _ { Handle = Fst; } }
                    setres C[@];
                }
            }));
        }

        take*B.ArgC = Builtin.ArgsLen[];
        const B.RawCall = ([ArgC:B.ArgC &C:B->RawCall](
            match Builtin.ArgsLen[] {
                [ArgC] {
                    setres C[@];
                }
                N {
                    Builtin.ExpandStack!;
                    Builtin.Err! *Builtin.Concat[
                        "Unexpected argc "
                        *Builtin.Concat[
                            *Builtin.Stringify[N]
                            *Builtin.Concat[
                                ", expected: "
                                *Builtin.Stringify[ArgC]
                            ]
                        ]
                    ];
                    inline@ Arg {
                        Builtin.Err! Arg;
                    }
                    Builtin.Exit! 3;
                }
            }
        ));

        const B.Call = (match @ => @ {
            setres ...RawCall[@];
        });
        const B.Goto = ([B DeclStat](
            setres B.result;
            B.ret_counter = @counter + 1;
            match DeclStat {
                [null] { goto :start; }
                [@declare @define] { @counter = B.define_line; }
            }
        ));
        match DeclStat { [@declare @define] {} [null] {
            :start
            const B.Goto = ([| :start]B->Goto);
        } }

        match DeclStat { [@declare] {} [null @define] {
            B.Expander!;
        } }
    }
    :end
});
# 允许将声明定义分开, 可以进行一些灵活的操作,
# 但是依旧需要在调用前运行定义, 不然跳转行号是未知的
const Add = Function[@declare a b ()]->Call;

const Foo = Function[(
    ...result = Add[1 2];
)]->Call;

Function! @define Add->.. a b (
    ...result = _0 + _1;
);

print Add[1 2]", "Add[3 4]"\n";
print "foo: "Foo[];
printflush message1;

#* >>>
op add __6.define_line @counter 1
jump 7 always 0 0
op add __6.result __6.a __6.b
set @counter __6.ret_counter
jump 7 always 0 0
set __71.result 3
set @counter __71.ret_counter
set __6.b 2
set __6.a 1
op add __6.ret_counter @counter 1
set @counter __6.define_line
print __6.result
print ", "
set __6.b 4
set __6.a 3
op add __6.ret_counter @counter 1
set @counter __6.define_line
print __6.result
print "\n"
print "foo: "
op add __71.ret_counter @counter 1
jump 5 always 0 0
print __71.result
printflush message1
*#
