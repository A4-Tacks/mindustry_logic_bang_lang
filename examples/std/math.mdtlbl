#*
数学标准库
*#

const PI = 3.1415926535897932;
const E = 2.7182818284590452;

# \log_e2
const Ln2Value = 0.6931471805599453;

const LogN = (
    take Value = _0;
    take Base = _1;

    op $ (op $ log Value;) / (op $ log Base;);
);

const Log2 = (
    take Num = _0;
    op $ (op $ log Num;) / Ln2Value;
);

const Deg = (
    #**
    将弧度转换为角度
    *#
    take Num = _0;
    op $ Num * 57.2957795130823208;
);

const Rad = (
    #**
    将角度转换为弧度
    *#
    take Num = _0;
    op $ Num * 0.0174532925199432;
);

const Bit64HighOne = (
    #**
    * 使用二分法获取64bit正整数数中最高位1的索引
    * 如果输入`Num <= 0`返回0
    * 由于mdt的数字使用java-double, 有52位有效整数
    *   且进行位运算时会临时转换成java-long, 有63位有效整数
    *   所以可以直接对这64bit进行二分
    * # params
    * - Num: 给定的大于0的数, 它会被直接进行更改
    *   如果你之后还要使用可以传入`($ = n;)`
    *#
    #*
    *#
    take Num = _0;

    take Idx = $;

    Idx = 0;

    const DoBinarySplit = (
        take Mask = _0;
        take Len = _1;

        if Num > Mask {
            op Num Num >> Len;
            op Idx Idx + Len;
        }
    );

    take[0xFFFF_FFFF 32] DoBinarySplit;
    take[0xFFFF 16] DoBinarySplit;
    take[0xFF 8] DoBinarySplit;
    take[0xF 4] DoBinarySplit;
    take[0x3 2] DoBinarySplit;

    if Num > 0x1 {
        # 结尾并不使用DoBinarySplit,
        # 因为这是最后一次二分,
        # 改变Num没有意义
        op Idx Idx + 1;
    }
);
