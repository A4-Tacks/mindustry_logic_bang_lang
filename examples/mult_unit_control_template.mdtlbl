#**
* 这是一个多控模板, 利用控制状态来绑定未被控制的单位
* 是单位打表类型多控
* 因其流水线设计思路使其稳定性极佳, 并会清除单位表中重复单位
*
* 由于使用协程的思路将高时间复杂度的去重算法均摊到了每一次绑定, 所以它很快
* 重复绑定理论上只有在不可测情况下发生,
* 比如可能由于回档/重新加载等情况可能导致的一些问题从而将相同单位存入表中,
* 所以这是属于级小概率事件, 就像这个事件一样, 表去重的速度也是非常慢,
* 但是其整体占用的时间极少
*
* 有一个问题是, 由于绑定本身也是流水线式的,
* 所以在寻找单位绑定入表的效率会非常低,
* 这可以在绑定单位处改为一个计数循环从而一次查找多个单位来实现, 可以增加绑定效率
*
* 注意, 增设自己的逻辑时, 最好也以流水线思路设计, 尽量不要留下循环、往回跳等
* 导致单次流水线较长时间, 从而使表中单位失控
*
* 注: 此逻辑依赖游戏特性 直绑单位对象不会改变遍历绑定单位对象位置的特性
*#

const MaxUnits = 5;

const GetUnit = (
    take Id = _0;
    const F = _1;

    switch Id {
        break;
    case: take F[units.0->$];
    case: take F[units.1->$];
    case: take F[units.2->$];
    case: take F[units.3->$];
    case: take F[units.4->$];
    }
);

take GetUnit[unit_id (unit = _0;)];

# 查错协程
if check_unit == null {
    if unit != null {
        check_unit = unit;
        check_start = unit_id;
    }
} elif unit_id == check_start {
    check_unit = null;
} else {
    take GetUnit[unit_id const(if _0 == check_unit {
        unit, check_unit = null;
    })];
}


if unit == null {
    const UnitType = @flare;
    take (
        const Fail = (sensor $ @unit @controlled;);

        const Repeat = (const match @ {
            [0] F {}
            *N F {
                take*I = N - 1;
                take Repeat[I F] F[I];
            }
        });

        # 在每轮重复绑定多次以提高绑定推进效率
        take Repeat[4 (
            ubind UnitType;
            goto :end !Fail;
        )];

        ubind UnitType;
        skip Fail {
            :end
            unit = @unit;
        }
    );
}

if (sensor $ unit @dead;)
|| (ctrler: sensor $ unit @controller;) != @this
&& ctrler != unit
|| (sensor $ unit @controlled;) == @ctrlPlayer
{
    unit = null;
} else {
    # 逻辑部分
    ubind unit;
    ucontrol move (?@thisx - (unit_id+1)*3) @thisy 0 0 0;
}

take GetUnit[unit_id (_0 = unit;)];

unit_id += 1;
unit_id %= MaxUnits;
