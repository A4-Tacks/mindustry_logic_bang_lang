Builtin.MissesMatch! 1;
Builtin.BindSep! '.';

# pre define macros
const For = (const match @ {
    *I [in] _ *Stop F {
        setres For[I in 0 .. Stop .. 1 F];
    }
    *I [in] *Start _ *Stop F {
        setres For[I in Start .. Stop .. 1 F];
    }
    *I [in] *Start _ _ *Stop F {
        setres For[I in Start .. .. Stop .. 1 F];
    }
    *I [in] *Start _ *Stop _ *Step F {
        setres For[I in_impl Start .. Stop .. Step F (?I < Stop)];
    }
    *I [in] *Start _ _ *Stop _ *Step F {
        setres For[I in_impl Start .. Stop .. Step F (?I <= Stop)];
    }
    *I [inrev] _ *Stop F {
        setres For[I inrev 0 .. Stop .. 1 F];
    }
    *I [inrev] *Start _ *Stop F {
        setres For[I inrev Start .. Stop .. 1 F];
    }
    *I [inrev] *Start _ _ *Stop F {
        setres For[I inrev Start .. .. Stop .. 1 F];
    }
    *I [inrev] *Start _ *Stop _ *Step F {
        setres For[I inrev_impl Start .. Stop .. Step F (?I > Stop)];
    }
    *I [inrev] *Start _ _ *Stop _ *Step F {
        setres For[I inrev_impl Start .. Stop .. Step F (?I >= Stop)];
    }
    *I [in_impl] *Start _ *Stop _ *Step F C {
        setres For[I in_impl Start .. Stop .. Step F C (_0 += _1;)];
    }
    *I [inrev_impl] *Start _ *Stop _ *Step F C {
        setres For[I in_impl Start .. Stop .. Step F C (_0 -= _1;)];
    }
    *I [in_impl] *Start _ *Stop _ *Step F C Inc {
        I = Start;
        {
            const I = Start;
            match Builtin.EvalNum[C] {
                [`__` 0] { goto :end !C; }
                [1] {}
            }
        }
        do {
            setres F[I];
            Inc! I Step;
        } while C;
        :end
    }
    *I [of] @ F {
        inline@ Arg {{
            take Builtin.Const[I `Arg`];
            take F[];
        }}
    }
    *I [as] _ *Stop F {
        setres For[I as 0 .. Stop .. 1 F];
    }
    *I [as] *Start _ *Stop F {
        setres For[I as Start .. Stop .. 1 F];
    }
    *I [as] *Start _ _ *Stop F {
        setres For[I as Start .. .. Stop .. 1 F];
    }
    *I [as] *Start _ *Stop _ *Step F {
        setres For[I as_impl Start .. Stop .. Step F (?J < Stop)];
    }
    *I [as] *Start _ _ *Stop _ *Step F {
        setres For[I as_impl Start .. Stop .. Step F (?J <= Stop)];
    }
    *I [asrev] _ *Stop F {
        setres For[I asrev 0 .. Stop .. 1 F];
    }
    *I [asrev] *Start _ *Stop F {
        setres For[I asrev Start .. Stop .. 1 F];
    }
    *I [asrev] *Start _ _ *Stop F {
        setres For[I asrev Start .. .. Stop .. 1 F];
    }
    *I [asrev] *Start _ *Stop _ *Step F {
        setres For[I asrev_impl Start .. Stop .. Step F (?J > Stop)];
    }
    *I [asrev] *Start _ _ *Stop _ *Step F {
        setres For[I asrev_impl Start .. Stop .. Step F (?J >= Stop)];
    }
    *I [as_impl] *Start _ *Stop _ *Step F C {
        setres For[I as_impl Start .. Stop .. Step F C (?_0 + _1)];
    }
    *I [asrev_impl] *Start _ *Stop _ *Step F C {
        setres For[I as_impl Start .. Stop .. Step F C (?_0 - _1)];
    }
    *I [as_impl] *Start _ *Stop _ *Step F C Inc {
        match Builtin.EvalNum[(?Start+Step+Stop)] {
            [`__`] {
                match "for-as: can not eval ("Start".."Stop".."Step")" => @ {}
                take E = ""; inline@ S {
                    take E = Builtin.Concat[E *Builtin.Stringify[S]];
                }
                Builtin.Err! E;
                Builtin.Exit! 2;
            }
            _ {}
        }
        match Builtin.EvalNum[(?Step <= 0)] {
            [0] {}
            [1] {
                Builtin.Err! *Builtin.Concat[
                    "for-as: invalid step "
                    *Builtin.Stringify[Step]
                ];
                Builtin.Exit! 2;
            }
        }
        take J = Start;
        inline 0@ { match Builtin.EvalNum[C] {
            [1] {
                {
                    Builtin.Const! I `J`;
                    take F[];
                }
                take J = Inc[J Step];
            }
            [0] { Builtin.StopRepeat!; }
        } }
    }
});
const QuickMemory = (match @ {
    Mem {
        setres Mem;
        const $.F = (match @ {
            #**
            * extend methods
            *#
            {
                const $.Read = ([H:..](match @ {
                    Result Addr {
                        setres Result;
                        read Result H Addr;
                    }
                }));
            }
            #**
            * quick read
            *#
            Addr {
                read $ .. Addr;
            }
            #**
            * write
            *#
            @ Value {
                inline@ Addr {
                    write Value .. Addr;
                }
            }
        });
    }
});

# codes
const TriangleSize = 10;
const CurLine = QuickMemory[cell1]->F;
const PrevLine = QuickMemory[cell2]->F;

print"\
1
1 1
";

lastSize = 2;

PrevLine! 0 1 1; # like `PrevLine[0, 1] = 1`

For! i in 3....TriangleSize (
    CurLine! 0 1;

    For! j in 1..lastSize (
        CurLine! j (*PrevLine[(*j- 1)] + PrevLine[j]);
    );
    CurLine! lastSize 1;
    lastSize++;

    For! c in ..lastSize (
        print CurLine[].Read[cur_c c];
        PrevLine! c cur_c;
        if c < (*lastSize- 1) { print " "; }
    );
    print "\n";
);

printflush message1;

#* >>>
print "1\n1 1\n"
set lastSize 2
write 1 cell2 0
write 1 cell2 1
set i 3
write 1 cell1 0
set j 1
jump 15 greaterThanEq 1 lastSize
op sub __107 j 1
read __106 cell2 __107
read __109 cell2 j
op add __104 __106 __109
write __104 cell1 j
op add j j 1
jump 8 lessThan j lastSize
write 1 cell1 lastSize
op add lastSize lastSize 1
set c 0
jump 27 greaterThanEq 0 lastSize
read cur_c cell1 c
print cur_c
write cur_c cell2 c
op sub __169 lastSize 1
jump 25 greaterThanEq c __169
print " "
op add c c 1
jump 19 lessThan c lastSize
print "\n"
op add i i 1
jump 5 lessThanEq i 10
printflush message1
*#
