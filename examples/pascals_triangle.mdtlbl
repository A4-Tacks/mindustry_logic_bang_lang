# pre define macros
const ForC = (const match @ {
    #**
    * Static expand for loop impl
    *#
    *Stop F {
        take ForC[0 Stop F];
    }
    *Start *Stop F {
        take ForC[Start Stop 1 F];
    }
    *Start *Stop *Step F {
        const Do = (const match @ {
            I:[?_0 < Stop] {
                take F[I];
                take Do[(?I+Step)->$];
            }
        });
        take Do[Start];
    }
});
const ForD = (const match @ {
    #**
    * Dynamic for loop
    *#
    *Stop F {
        take ForD[0 Stop F];
    }
    *Start *Stop F {
        take ForD[Start Stop 1 F];
    }
    *Start *Stop *Step F {
        # Dynamic Running impl
        take+I(?I:Start);

        while I < Stop {
            take F[I];
            I += Step;
        }
    }
});
const QuickMemory = (match @ {
    Mem {
        setres Mem;
        const $.F = (match @ {
            #**
            * extend methods
            *#
            {
                const $.Read = ([H:..](match @ {
                    Result Addr {
                        setres Result;
                        read Result H Addr;
                    }
                }));
            }
            #**
            * quick read
            *#
            Addr {
                read $ .. Addr;
            }
            #**
            * write
            *#
            @ Value {
                inline@ Addr {
                    write Value .. Addr;
                }
            }
        });
    }
});

# codes
const TriangleSize = 10;
const CurLine = QuickMemory[cell1]->F;
const PrevLine = QuickMemory[cell2]->F;

print"\
1
1 1
";

lastSize = 2;

PrevLine! 0 1 1; # like `PrevLine[0, 1] = 1`

ForD! 3 (%(*TriangleSize+1))->$ const(match @ => I {
    CurLine! 0 1;

    ForD! 1 lastSize (match @ => J {
        CurLine! J (*PrevLine[(*J- 1)] + PrevLine[J]);
    });
    CurLine! lastSize 1;
    lastSize++;

    ForD! lastSize (match @ => C {
        print CurLine[].Read[cur_c C];
        PrevLine! C cur_c;
        if C < (*lastSize- 1) { print " "; }
    });
    print "\n";
});

printflush message1;

#* >>>
print "1\n1 1\n"
set lastSize 2
write 1 cell2 0
write 1 cell2 1
set __23 3
jump 31 greaterThanEq __23 11
write 1 cell1 0
set __40 1
jump 16 greaterThanEq __40 lastSize
op sub __49 __40 1
read __48 cell2 __49
read __51 cell2 __40
op add __46 __48 __51
write __46 cell1 __40
op add __40 __40 1
jump 9 lessThan __40 lastSize
write 1 cell1 lastSize
op add lastSize lastSize 1
set __71 0
jump 28 greaterThanEq __71 lastSize
read cur_c cell1 __71
print cur_c
write cur_c cell2 __71
op sub __87 lastSize 1
jump 26 greaterThanEq __71 __87
print " "
op add __71 __71 1
jump 20 lessThan __71 lastSize
print "\n"
op add __23 __23 1
jump 6 lessThan __23 11
printflush message1
*#
