// this is a lalrpop file
#![allow(clippy::just_underscores_and_digits)]
#![allow(clippy::needless_lifetimes)]
#![allow(clippy::deprecated_cfg_attr)]

use crate::syntax::{
    Errors,
    Error,
    Op,
    Value,
    Var,
    DExp,
    JumpCmp,
    Goto,
    Expand,
    Select,
    Const,
    Take,
    LogicLine,
    Meta,
    ARG_RES,
};

grammar(meta: &mut Meta);

extern {
    type Error = Error;
    type Location = Location;
}

match {
    r"\s+" => {}, // empty
    r##"#(?:[\r\n]|[^\*][^\r\n]*)"## => {}, // inline comments
    r##"#\*[^*]*\*+(?:[^#*][^*]*\*+)*#"## => {}, // long comments
} else {
    _
}

pub String: Var = r#""[^"]*""# => <>.replace('\n', "\\n");
pub Ident: Var = r"[_\p{XID_Start}]\p{XID_Continue}*" => <>.into();
pub OIdent: Var = r"@[_\p{XID_Start}][\p{XID_Continue}\-]*" => <>.into(); // `@abc-def`这种
pub Number: Var = r"(?:0(?:x-?[\da-fA-F][_\da-fA-F]*|b-?[01][_01]*)|-?\d[_\d]*(?:\.\d[\d_]*)?)"
    => <>.chars().filter(|&c| c != '_').collect();
pub OtherValue: Var = r"'[^'\s]+'" => {
    let mut res: Var = <>.chars().skip(1).collect();
    res.pop().unwrap();
    res
}; // 特殊格式的值, 如`'@abc-def'`

// 逻辑里面一个单元
// 例如`0x50` `'@alpha'` `add` `'a-b-c'`
pub Var: Var = {
    String,
    Ident,
    OIdent,
    Number,
    OtherValue,
}

pub Value: Value = {
    Var => <>.into(),
    DExp => <>.into(),
    "$" => Value::ResultHandle,
}

pub LiteralUInt: usize = <l:@L> <num:Number> <r:@R> =>? {
    let mut chars = num.chars();
    let res = if let Some('0') = chars.next() {
        match chars.next() {
            Some('x') => usize::from_str_radix(&chars.collect::<String>(), 16),
            Some('b') => usize::from_str_radix(&chars.collect::<String>(), 2),
            _ => num.parse::<usize>(),
        }
    } else {
        num.parse::<usize>()
    };
    match res {
        Ok(num) => Ok(num),
        Err(e) => Err(Error::from(([l, r], Errors::NotALiteralUInteger(num, e))).into()),
    }
};

Value_0: Value = Value => <>.default_result(|| ARG_RES[0].into());
Value_1: Value = Value => <>.default_result(|| ARG_RES[1].into());
Value_2: Value = Value => <>.default_result(|| ARG_RES[2].into());
Value_3: Value = Value => <>.default_result(|| ARG_RES[3].into());
Value_4: Value = Value => <>.default_result(|| ARG_RES[4].into());
Value_5: Value = Value => <>.default_result(|| ARG_RES[5].into());
Value_6: Value = Value => <>.default_result(|| ARG_RES[6].into());
Value_7: Value = Value => <>.default_result(|| ARG_RES[7].into());
Value_8: Value = Value => <>.default_result(|| ARG_RES[8].into());
Value_9: Value = Value => <>.default_result(|| ARG_RES[9].into());
Value_x: Value = Value => <>.default_result(|| "_".into());
Value_L: Value = Value => <>.default_result(|| meta.get_tmp_var()); // 使用一个不透明句柄, 独占一个变量


Or<A, B> = { A, B }; // A或者B
Or3<A, B, C> = { A, B, C }; // A或者B或者C
OrSwap<A, B> = { A B, B A }; // 匹配 `A B`或者`B A`
OrRev<A, M, B> = { A M B, B, M, A }; // 匹配`A M B`或者`B M A`
OrShl<A, B, C> = { A B C, B C A }; // 匹配`A B C`或者`B C A`, 后者是值进行左移循环得到
Wrap<Open, T, Close> = Open <T> Close; // 用于定义包裹
MTuple<T> = Wrap<"(", T, ")">;
MList<T> = Wrap<"[", T, "]">;
MBlock<T> = Wrap<"{", T, "}">;
OpenArgs<T, S> = (<T> S)*; // 零至多个有分隔后缀值
CloseArgs<T, S> = (<T> S)* T => { // 一至多个有分隔无后缀值
    let (mut args, tail) = <>;
    args.push(tail);
    args
};
Span<T> = @L T @R;

LEnd: () = ";" => ();

pub JumpCmp: JumpCmp = {
    <OrSwap<Or<"equal", "==">, <Value_0>>> <Value_1> => JumpCmp::Equal(<>),
    <OrSwap<Or<"notEqual", "!=">, <Value_0>>> <Value_1> => JumpCmp::NotEqual(<>),
    <OrSwap<Or<"lessThan", "<">, <Value_0>>> <Value_1> => JumpCmp::LessThan(<>),
    <OrSwap<Or<"lessThanEq", "<=">, <Value_0>>> <Value_1> => JumpCmp::LessThanEq(<>),
    <OrSwap<Or<"greaterThan", ">">, <Value_0>>> <Value_1> => JumpCmp::GreaterThan(<>),
    <OrSwap<Or<"greaterThanEq", ">=">, <Value_0>>> <Value_1> => JumpCmp::GreaterThanEq(<>),
    <OrSwap<Or<"strictEqual", "===">, <Value_0>>> <Value_1> => JumpCmp::StrictEqual(<>),
    Or<"always", "_"> => JumpCmp::Always,
    // 扩展
    Or<"lnot", "!"> <Value_0> => JumpCmp::bool(<>).reverse(),
    <Value_0> => JumpCmp::bool(<>),
}

pub Op: Op = {
    // 2
    <a:OrShl<Or<"add", "+">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Add(a.0, a.1, b),
    <a:OrShl<Or<"sub", "-">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Sub(a.0, a.1, b),
    <a:OrShl<Or<"mul", "*">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Mul(a.0, a.1, b),
    <a:OrShl<Or<"div", "/">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Div(a.0, a.1, b),
    <a:OrShl<Or<"idiv", "//">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Idiv(a.0, a.1, b),
    <a:OrShl<Or<"mod", "%">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Mod(a.0, a.1, b),
    <a:OrShl<Or<"pow", "**">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Pow(a.0, a.1, b),
    <a:OrShl<Or<"equal", "==">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Equal(a.0, a.1, b),
    <a:OrShl<Or<"notEqual", "!=">, <Value_x>, <Value_0>>> <b:Value_1> => Op::NotEqual(a.0, a.1, b),
    <a:OrShl<Or<"land", "&&">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Land(a.0, a.1, b),
    <a:OrShl<Or<"lessThan", "<">, <Value_x>, <Value_0>>> <b:Value_1> => Op::LessThan(a.0, a.1, b),
    <a:OrShl<Or<"lessThanEq", "<=">, <Value_x>, <Value_0>>> <b:Value_1> => Op::LessThanEq(a.0, a.1, b),
    <a:OrShl<Or<"greaterThan", ">">, <Value_x>, <Value_0>>> <b:Value_1> => Op::GreaterThan(a.0, a.1, b),
    <a:OrShl<Or<"greaterThanEq", ">=">, <Value_x>, <Value_0>>> <b:Value_1> => Op::GreaterThanEq(a.0, a.1, b),
    <a:OrShl<Or<"strictEqual", "===">, <Value_x>, <Value_0>>> <b:Value_1> => Op::StrictEqual(a.0, a.1, b),
    <a:OrShl<Or<"shl", "<<">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Shl(a.0, a.1, b),
    <a:OrShl<Or<"shr", ">>">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Shr(a.0, a.1, b),
    <a:OrShl<Or<"or", "|">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Or(a.0, a.1, b),
    <a:OrShl<Or<"and", "&">, <Value_x>, <Value_0>>> <b:Value_1> => Op::And(a.0, a.1, b),
    <a:OrShl<Or<"xor", "^">, <Value_x>, <Value_0>>> <b:Value_1> => Op::Xor(a.0, a.1, b),

    <OrSwap<"max", <Value_x>>> <Value_0> <Value_1> => Op::Max(<>),
    <OrSwap<"min", <Value_x>>> <Value_0> <Value_1> => Op::Min(<>),
    <OrSwap<"angle", <Value_x>>> <Value_0> <Value_1> => Op::Angle(<>),
    <OrSwap<"len", <Value_x>>> <Value_0> <Value_1> => Op::Len(<>),
    <OrSwap<"noise", <Value_x>>> <Value_0> <Value_1> => Op::Noise(<>),

    // 1
    // 此处使用`Value_x`来接受逻辑导出时的占位符
    <OrSwap<Or<"not", "~">, <Value_x>>> <Value_0> Value_x? => Op::Not(<>),
    <OrSwap<"abs", <Value_x>>> <Value_0> Value_x? => Op::Abs(<>),
    <OrSwap<"log", <Value_x>>> <Value_0> Value_x? => Op::Log(<>),
    <OrSwap<"log10", <Value_x>>> <Value_0> Value_x? => Op::Log10(<>),
    <OrSwap<"floor", <Value_x>>> <Value_0> Value_x? => Op::Floor(<>),
    <OrSwap<"ceil", <Value_x>>> <Value_0> Value_x? => Op::Ceil(<>),
    <OrSwap<"sqrt", <Value_x>>> <Value_0> Value_x? => Op::Sqrt(<>),
    <OrSwap<"rand", <Value_x>>> <Value_0> Value_x? => Op::Rand(<>),
    <OrSwap<"sin", <Value_x>>> <Value_0> Value_x? => Op::Sin(<>),
    <OrSwap<"cos", <Value_x>>> <Value_0> Value_x? => Op::Cos(<>),
    <OrSwap<"tan", <Value_x>>> <Value_0> Value_x? => Op::Tan(<>),
    <OrSwap<"asin", <Value_x>>> <Value_0> Value_x? => Op::Asin(<>),
    <OrSwap<"acos", <Value_x>>> <Value_0> Value_x? => Op::Acos(<>),
    <OrSwap<"atan", <Value_x>>> <Value_0> Value_x? => Op::Atan(<>),
    // 扩展(1)
    <OrSwap<Or<"lnot", "!">, <Value_x>>> <Value_0> Value_x? => Op::Equal(<>, "false".into()),
}

Label: String = ":" <Var>;

pub Expand: Expand = LogicLine* => Expand(<>);
pub LogicLine: LogicLine = {
    Control,
    BuiltinCommand,
    MBlock<Expand> => <>.into(),
    Label => LogicLine::Label(<>),
    "op" <Op> LEnd => <>.into(),
    "noop" LEnd => LogicLine::NoOp,
    "end" LEnd => LogicLine::End,
    "set" <var:Value_x> <value:Value_0> LEnd => LogicLine::Other(vec!["set".into(), var.into(), value]),
    <var:Value_x> "=" <value:Value_0> LEnd => LogicLine::Other(vec!["set".into(), var.into(), value]),
    "read" <var:Value_x> <from:Value_0> <index:Value_1> LEnd
        => LogicLine::Other(vec!["read".into(), var.into(), from, index]),
    "print" <Args> LEnd => {
        if <>.is_empty() {
            // 无参数, 啥也不做
            return LogicLine::Ignore
        }
        if <>.len() == 1 {
            // 单个参数, 老式处理
            return LogicLine::Other(vec!["print".into(), <>.into_iter().next().unwrap()])
        }
        Expand(
            <>.into_iter()
                .map(|arg| LogicLine::Other(vec!["print".into(), arg]))
                .collect()
        ).into()
    },
    <cmd:Value_x> <mut args:Args> LEnd => {
        args.insert(0, cmd);
        LogicLine::Other(args)
    },
}

#[inline] Args: Vec<Value> = {
    () => vec![],
    Value_0 => vec![<>],
    Value_0 Value_1 => vec![<>],
    Value_0 Value_1 Value_2 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 Value_7 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 Value_7 Value_8 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 Value_7 Value_8 Value_9 => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 Value_7 Value_8 Value_9 Value_x => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 Value_7 Value_8 Value_9 Value_x Value_x => vec![<>],
    Value_0 Value_1 Value_2 Value_3 Value_4 Value_5 Value_6 Value_7 Value_8 Value_9 Value_x Value_x Value_x => vec![<>],
}

pub BuiltinCommand: LogicLine = {
    "const" <Var> "=" <Value> LEnd => Const(<>).into(),

    // 如果后方是一个Var则直接将常量映射到后方的值
    // 如果后方是一个DExp则将其计算然后将常量映射到计算出的句柄
    // 此处默认句柄使用Value_L
    "take" <Var> "=" <Value_L> LEnd => Take(<>).into(),
}

//  if结构定义
//  ```
//  if x {
//      1
//  } elif y {
//      2
//  } elif z {
//      3
//  } else {
//      4
//  }
//  ```
//  
//  被转换为
//  ```
//  goto :a x
//  goto :b y
//  goto :c z
//  4
//  goto :d _
//  :b
//  2
//  goto :d _
//  :c
//  3
//  goto :d _
//  :a
//  1
//  :d
//  ```
//
//  goto :a x
//  $($elif_gotos)*
//  $else_body?
//  goto :end _
//  $(
//      $elif_tag
//      $elif_body
//      goto :end _
//  )*
//  :a
//  $if_body
//  :end

pub Block: LogicLine = MBlock<Expand> => <>.into();

pub DExp: DExp = MTuple<(<(<Var> ":")?> <Expand>)>
    => DExp::new(<>.0.unwrap_or_default(), <>.1);

pub Control: LogicLine = {
    "goto" <Label> <JumpCmp> LEnd => Goto(<>).into(),

    "skip" <cmp:JumpCmp> <body:LogicLine> => {
        let lab = meta.get_tag();
        Expand(vec![
            Goto(lab.clone(), cmp).into(),
            body,
            LogicLine::Label(lab),
        ]).into()
    },

    "while" <cmp:JumpCmp> <body:LogicLine> => {
        let [end, head] = [meta.get_tag(), meta.get_tag()];
        let rev_cmp = cmp.clone().reverse();
        Expand(vec![
            Goto(end.clone(), rev_cmp).into(),
            LogicLine::Label(head.clone()),
            body,
            Goto(head, cmp).into(),
            LogicLine::Label(end),
        ]).into()
    },

    "do" <body:Block> "while" <cmp:JumpCmp> LEnd => {
        let head = meta.get_tag();
        Expand(vec![
            LogicLine::Label(head.clone()),
            body,
            Goto(head, cmp).into(),
        ]).into()
    },

    "switch" <value:Value_0>
    <cases:MBlock<("case" <LiteralUInt+> ":" <Expand>)+>>
    => {
        let case_num_max = cases
            .iter()
            .map(
                |(nums, _)| *nums
                    .iter()
                    .max()
                    .unwrap()
            )
            .max()
            .unwrap();
        let mut cases_res = Vec::with_capacity(case_num_max);
        for (nums, expand) in cases {
            for num in nums {
                for _ in cases_res.len()..=num {
                    cases_res.push(LogicLine::NoOp)
                }
                cases_res[num] = expand.clone().into()
            }
        }
        debug_assert_eq!(cases_res.len(), case_num_max + 1);
        Select(value, Expand(cases_res)).into()
    },

    "if" <cmp:JumpCmp> <body:Block>
        <elifs:("elif" <JumpCmp> <Block>)*>
        <else_body:("else" <LogicLine>)?> => {

        let end = meta.get_tag();
        let true_start = meta.get_tag();
        let mut elif_tags = Vec::with_capacity(elifs.len());
        elif_tags.extend((0..elifs.len()).map(|_| meta.get_tag())); // build elif tags
        let (mut elif_cmps, mut elif_bodys) = (
            Vec::with_capacity(elifs.len()),
            Vec::with_capacity(elifs.len())
        );
        let elif_count = elifs.len();
        for (cmp, body) in elifs {
            elif_cmps.push(cmp);
            elif_bodys.push(body);
        }
        debug_assert_eq!(elif_cmps.len(), elif_count);

        let mut res = Vec::new();
        res.push(Goto(true_start.clone(), cmp).into()); // true jump
        for (cmp, tag) in elif_cmps.into_iter().zip(&elif_tags) {
            res.push(Goto(tag.clone(), cmp).into()); // true jump
        }
        else_body.map(|body| res.push(body));
        res.push(Goto(end.clone(), JumpCmp::Always).into()); // jump always to end

        // elif body
        for (tag, body) in elif_tags.into_iter().zip(elif_bodys) {
            res.push(LogicLine::Label(tag));
            res.push(body);
            res.push(Goto(end.clone(), JumpCmp::Always).into()); // jump always to end
        }

        // true body
        res.push(LogicLine::Label(true_start));
        res.push(body);
        res.push(LogicLine::Label(end));

        Expand(res).into()
    },
}
